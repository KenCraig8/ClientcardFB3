<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ClientcardFB3</name>
    </assembly>
    <members>
        <member name="F:ClientcardFB3.AboutBoxCSDG.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:ClientcardFB3.AboutBoxCSDG.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:ClientcardFB3.AboutBoxCSDG.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:ClientcardFB3.AccessReports.SetDataValue(System.String,System.String)">
             <summary>
            An Overloaded set of get/set funtions that will take in any kind of data value used in 
            the front end and accsess the data set for that data type, used mostly for a collection
            of textboxes so collection can be itterated through in one loop and have one funtion called
            no matter what type it actually refrenced
             </summary>
             <param name="FieldName">Fieldname=Collum Name in the Database</param>
             <param name="FieldValue">FieldValue= .Net Data type</param>
        </member>
        <member name="M:ClientcardFB3.AccessReports.openConnection">
            <summary>
            Opens a connection to the Database
            </summary>
        </member>
        <member name="M:ClientcardFB3.AccessReports.closeConnection">
            <summary>
            Closes a connection to the Database
            </summary>
        </member>
        <member name="M:ClientcardFB3.AccessReportsForm.btnCreateReport_Click(System.Object,System.EventArgs)">
            <summary>
            Event Triggers when user clicks on the Create Report Button
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ClientcardFB3.AccessReportsForm.createReport(System.String,System.String)">
            <summary>
            Opens the report in Access, fills it, and is previewed or printed
            </summary>
            <param name="whereClause">The where clasue for the Access Object OpenReport Method</param>
        </member>
        <member name="M:ClientcardFB3.AccessReportsForm.openReportForm(System.String)">
            <summary>
            Opens the report in Access, fills it, and is previewed or printed
            </summary>
            <param name="whereClause">The where clasue for the Access Object OpenReport Method</param>
        </member>
        <member name="M:ClientcardFB3.AccessReportsForm.fillRptCombo">
            <summary>
            Fills the Report Groups Combo Box
            </summary>
        </member>
        <member name="M:ClientcardFB3.AccessReportsForm.loadLVReports">
            <summary>
            Loads the reports into the Listview for selection
            </summary>
        </member>
        <member name="M:ClientcardFB3.AccessReportsForm.lvwRptSelector_SelectedIndexChanged(System.Object,System.EventArgs)">
            <summary>
            Event triggers when the selection is changed on the listview
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ClientcardFB3.AccessReportsForm.tbYear_KeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            Fires when the user presses a key while in a textbox 
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:ClientcardFB3.AccessReportsForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:ClientcardFB3.AccessReportsForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ClientcardFB3.AccessReportsForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ClientcardFB3.AddNewHousehold2.#ctor(ClientcardFB3.Client)" -->
        <member name="F:ClientcardFB3.AddNewHousehold2.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:ClientcardFB3.AddNewHousehold2.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ClientcardFB3.AddNewHousehold2.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:ClientcardFB3.AddNewEmailRecipientForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:ClientcardFB3.AddNewEmailRecipientForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ClientcardFB3.AddNewEmailRecipientForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:ClientcardFB3.AddNewVolDateForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:ClientcardFB3.AddNewVolDateForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ClientcardFB3.AddNewVolDateForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:ClientcardFB3.BarCodeEntryForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:ClientcardFB3.BarCodeEntryForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ClientcardFB3.BarCodeEntryForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:ClientcardFB3.YearlyForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:ClientcardFB3.YearlyForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ClientcardFB3.YearlyForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:ClientcardFB3.CashDonations.SetDataValue(System.String,System.String)">
             <summary>
            An Overloaded set of get/set funtions that will take in any kind of data value used in 
            the front end and accsess the data set for that data type, used mostly for a collection
            of textboxes so collection can be itterated through in one loop and have one funtion called
            no matter what type it actually refrenced
             </summary>
             <param name="FieldName">Fieldname=Collum Name in the Database</param>
             <param name="FieldValue">FieldValue= .Net Data type</param>
        </member>
        <member name="M:ClientcardFB3.CashDonations.setDataRow(System.Int32)">
            <summary>
            Sets the DataRow that the get/set accessors work off of using a Row Index
            </summary>
            <param name="rowIndex">The row index to set the drow to</param>
        </member>
        <member name="M:ClientcardFB3.CashDonations.openConnection">
            <summary>
            Opens a connection to the Database
            </summary>
        </member>
        <member name="M:ClientcardFB3.CashDonations.closeConnection">
            <summary>
            Closes a connection to the Database
            </summary>
        </member>
        <member name="M:ClientcardFB3.CashDonationsForm.#ctor">
            <summary>
            Constructor for the FoodDonations Form
            </summary>
        </member>
        <member name="M:ClientcardFB3.CashDonationsForm.btnBrowse_Click(System.Object,System.EventArgs)">
            <summary>
            Opens the Edit Donors Form so that a user can select which Donor
            made the donation
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ClientcardFB3.CashDonationsForm.btnClose_Click(System.Object,System.EventArgs)">
            <summary>
            Cnacles out of the Edit Donors Form
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ClientcardFB3.CashDonationsForm.btnEditDnrTrx_Click(System.Object,System.EventArgs)">
            <summary>
            This event fires when the user hit the button to
            edit an existing donation
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ClientcardFB3.CashDonationsForm.btnLogEntryCancel_Click(System.Object,System.EventArgs)">
            <summary>
            Fires when the user clicks on button to cancel out of
            Add/Edit Log Entry
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ClientcardFB3.CashDonationsForm.btnLogEntrySave_Click(System.Object,System.EventArgs)">
            <summary>
            Event fires when the user clicks on the Save buton
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ClientcardFB3.CashDonationsForm.btnNewDonation_Click(System.Object,System.EventArgs)">
            <summary>
            Event Fires when the user clicks on the new Donation Button
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ClientcardFB3.CashDonationsForm.LoadcboYear">
            <summary>
            Loads the Years into the Year Combo Box
            </summary>
        </member>
        <member name="M:ClientcardFB3.CashDonationsForm.fillDonationDates">
            <summary>
            Fills the Collection of Donation Dates
            </summary>
        </member>
        <member name="M:ClientcardFB3.CashDonationsForm.fillgbLogEntryControls(System.String)">
            <summary>
            Used when an edit of a foodDonation happens
            Loads the textboxes with the data from the 
            dataset
            Called after the Find() is called for the foodDonation
            </summary>
        </member>
        <member name="M:ClientcardFB3.CashDonationsForm.initNewDonationGB">
            <summary>
            Initializes the New/Edit Donation Groupbox to
            Blank textboxes and proper selected indexes
            </summary>
        </member>
        <member name="M:ClientcardFB3.CashDonationsForm.loadDonationLogList">
            <summary>
            Loads the Donation Log with the Donations for the selected date
            </summary>
        </member>
        <member name="M:ClientcardFB3.CashDonationsForm.loadDonorLogList">
            <summary>
            Loads the Donor log listView with the donoations for the 
            Selected donor
            </summary>
        </member>
        <member name="M:ClientcardFB3.CashDonationsForm.changedMode">
            <summary>
            Changes the current mode from view existing Donations for date to
            Enter New or Edit Selected Donation
            Changes visibility on the different controls
            </summary>
        </member>
        <member name="F:ClientcardFB3.CashDonationsForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:ClientcardFB3.CashDonationsForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ClientcardFB3.CashDonationsForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:ClientcardFB3.CCFBGlobal.INVALID_TYPE_CODE">
            <summary>
            This string is used when the input form has a value stored in the TypeCode field that
            is not in the TypeCode table.
            </summary>
        </member>
        <member name="M:ClientcardFB3.CCFBGlobal.calcAge(System.DateTime,System.DateTime)">
            <summary>
            Calculates the age for a given birthdagte using any given date
            </summary>
            <param name="BirthDay">The birthdate of the client</param>
            <param name="TestDate">The date to find Age from</param>
            <returns>The age</returns>
        </member>
        <member name="M:ClientcardFB3.CCFBGlobal.isConnectedToNetwork">
            <summary>
            Tells if the computer is connected to a network or not
            </summary>
            <returns>True = Connected To Network</returns>
        </member>
        <member name="M:ClientcardFB3.CCFBGlobal.InternetGetConnectedState(System.Int32@,System.Int32)">
            Creating the extern function... 
        </member>
        <member name="M:ClientcardFB3.CCFBGlobal.IsConnectedToInternet">
            <summary>
            Creating a function that uses the API function... 
            </summary>
            <returns>True = Connected To Internet</returns>
        </member>
        <member name="M:ClientcardFB3.CCFBGlobal.ConnectionInfo">
            <summary>
            Return the Connection info as a sting value 
            </summary>
            <returns>String representation of online or offline</returns>
        </member>
        <member name="M:ClientcardFB3.CCFBGlobal.verifyPath(System.String)">
            <summary>
            Verifys that the file path exists and creates the path if it does not
            </summary>
            <param name="path">File Path</param>
        </member>
        <member name="M:ClientcardFB3.CCFBGlobal.appendErrorToErrorReport(System.String,System.String)">
            <summary>
            Appends the error log with the error
            </summary>
            <param name="funtionParams">Any parameters the calling funtioin used</param>
            <param name="errorInfo">The info about the error</param>
        </member>
        <member name="M:ClientcardFB3.CCFBGlobal.appendGeneralErrorInfo(System.String,System.String)">
            <summary>
            Appends the error log with the general info about the error
            </summary>
            <param name="funtionParams">Any parameters the calling funtioin used</param>
            <param name="errorInfo">The info about the error</param>
        </member>
        <member name="M:ClientcardFB3.CCFBGlobal.checkForIntOnKeyPress(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Check and Supresses Keypress if not a valid key for entering an integer
            </summary>
            <param name="e">KeyEventArguments for the keypress</param>
        </member>
        <member name="M:ClientcardFB3.CCFBGlobal.checkForDecimalOnKeyPress(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Check and Supresses Keypress if not a valid key for entering an integer
            </summary>
            <param name="e">KeyEventArguments for the keypress</param>
        </member>
        <member name="M:ClientcardFB3.CCFBGlobal.ExportToExcell(System.Windows.Forms.ListView,System.String)">
            <summary>
            Exports a listview to exvcell
            </summary>
            <param name="lvi">The ListView to export to Excel</param>
            <param name="saveName">The name that the excel file will be saved as</param>
            <returns>If the grid was successfully exported and file saved</returns>
        </member>
        <member name="M:ClientcardFB3.CCFBGlobal.ExportToExcel(System.Windows.Forms.DataGridView,System.String)">
            <summary>
            Exports a grid to Excel
            </summary>
            <param name="dGv">The DataGridView to export to Excel</param>
            <param name="saveName">The name that the excel file will be saved as</param>
            <returns>If the grid was successfully exported and file saved</returns>
        </member>
        <member name="M:ClientcardFB3.CCFBGlobal.checkFileExists(System.String,System.String,System.String)">
            <summary>
            Checks if file eixists and prompts user if they 
            want to overwrite file or create new one
            </summary>
            <param name="saveName">The name of the file to save</param>
            <param name="strExtension">The extension of the file to save (ie .xls, .doc)</param>
            <param name="saveLocation">The path of where to save to file</param>
            <returns>The full save name</returns>
        </member>
        <member name="M:ClientcardFB3.CCFBGlobal.NullToZero(System.Object)">
            <summary>
            Checks for null value and either returns the integer 
            if no null value found or returns 0 if it is null
            </summary>
            <param name="value">The value to check for null</param>
            <returns>The integer value</returns>
        </member>
        <member name="M:ClientcardFB3.CCFBGlobal.NullToFalse(System.Object)">
            <summary>
            Checks for null value and either returns the bool 
            if no null value found or returns false if it is null
            </summary>
            <param name="value">The value to check for null</param>
            <returns>The bool value</returns>
        </member>
        <member name="M:ClientcardFB3.CCFBGlobal.NullToBlank(System.Object)">
            <summary>
            Checks for null, if null returns blank 
            otherwise returns the string value
            </summary>
            <param name="value">THe Value to check for null from</param>
            <returns>A string value</returns>
        </member>
        <member name="M:ClientcardFB3.CCFBGlobal.formatDate(System.DateTime)">
            <summary>
            Returns the properly formated date as MM\DD\YYYY
            </summary>
            <param name="value">The DateTime value that needs formatiing</param>
            <returns>Formated string value</returns>
        </member>
        <member name="M:ClientcardFB3.CCFBGlobal.formatDateYMD(System.DateTime)">
            <summary>
            Returns the properly formated date as YYYYMMDD
            </summary>
            <param name="value">The DateTime value that needs formatiing</param>
            <returns>Formated string value</returns>
        </member>
        <member name="M:ClientcardFB3.CCFBGlobal.formatStringWithCapitalization(System.String)">
            <summary>
            Caplitalizes the first letter of wach word in string
            </summary>
            <param name="value">The string value that needs formatiing</param>
            <returns>Formated string value</returns>
        </member>
        <member name="M:ClientcardFB3.CCFBGlobal.formatNumberWithCommas(System.Int32)">
            <summary>
            Formats the given int value to include commas where needed
            </summary>
            <param name="value">The value to convert</param>
            <returns>A string value with commas</returns>
        </member>
        <member name="M:ClientcardFB3.CCFBGlobal.formatNumberWithCommas(System.String)">
            <summary>
            Formats the given string value to include commas 
            and have decimal place with 2 values
            </summary>
            <param name="value">The value to convert</param>
            <returns>A string value with commas</returns>
        </member>
        <member name="M:ClientcardFB3.CCFBGlobal.formatNumberWithCommas(System.Object)">
            <summary>
            Formats the given object value to include commas 
            and have decimal place with 2 values
            </summary>
            <param name="value">The value to convert</param>
            <returns>A string value with commas</returns>
        </member>
        <member name="M:ClientcardFB3.CCFBGlobal.formatNumberWithLeadingZero(System.Object)">
            <summary>
            Formats the number to have a leading zero if value is less than 10
            </summary>
            <param name="value">The value integer that needs formating</param>
            <returns>The string value with leading zeros</returns>
        </member>
        <member name="M:ClientcardFB3.CCFBGlobal.formatNumberWithThreeLeadingZeros(System.Object)">
            <summary>
            Formats the given value to have 3 leading zeros where zeros are missing
            10 converts to 0010
            </summary>
            <param name="value">The value integer that needs formating</param>
            <returns>The string value with leading zeros</returns>
        </member>
        <member name="M:ClientcardFB3.CCFBGlobal.formatNumberWithSixLeadingZeros(System.Object)">
            <summary>
            Formats the given value to have 6 leading zeros where zeros are missing
             1 converts to 000001
            10 converts to 000010
            </summary>
            <param name="value">The value integer that needs formating</param>
            <returns>The string value with leading zeros</returns>
        </member>
        <member name="M:ClientcardFB3.CCFBGlobal.openDocumentOutsideCCFB(System.String)">
            <summary>
            Opens the given file in a process outside of ClientcardFB3
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="M:ClientcardFB3.CCFBGlobal.ValidDate(System.Object)">
            <summary>
            Validates that the given date is a valid DateTime
            </summary>
            <param name="objValue">The value to check</param>
            <returns>A Valid DateTime value</returns>
        </member>
        <member name="M:ClientcardFB3.CCFBGlobal.ValidDateString(System.Object)">
            <summary>
            Validates that the given date is a valid DateTime
            </summary>
            <param name="objValue">The value to check</param>
            <returns>A Valid ShortDateString</returns>
        </member>
        <member name="M:ClientcardFB3.CCFBGlobal.IdxFromLongName(System.Int32,System.String)">
            <summary>
            Return the index of the TypeCode with the specified long name (Type column in DB).
            </summary>
            <param name="a_typeCodeId">Lookup this type code value in the TypeCode list.</param>
            <returns>The index in the TypeCode list of the </returns>
        </member>
        <member name="M:ClientcardFB3.CCFBGlobal.LongNameFromId(System.Int32,System.Int32)">
            <summary>
            Return the TypeCode long name string (Type column in DB) that corresponds to the
            specified TypeCode ID (primary key column).
            </summary>
            <param name="a_typeCodeId">Lookup this type code value in the TypeCode list.</param>
            <returns></returns>
        </member>
        <member name="F:ClientcardFB3.CCFBStatisticsForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:ClientcardFB3.CCFBStatisticsForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ClientcardFB3.CCFBStatisticsForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:ClientcardFB3.Client.#ctor(System.String)">
            <summary>
            Initializes all local data members of class
            </summary>
            <param name="connectString">connectString = Connection String</param>
        </member>
        <member name="M:ClientcardFB3.Client.openConnection">
            <summary>
            Opens a connection to the Database
            </summary>
        </member>
        <member name="M:ClientcardFB3.Client.closeConnection">
            <summary>
            Closes a connection to the Database
            </summary>
        </member>
        <member name="M:ClientcardFB3.Client.calcAllHHMemAges(System.DateTime)">
            <summary>
            Calculates the Ages of each Household Member and sets those values in the form and in the database
            </summary>
        </member>
        <member name="M:ClientcardFB3.ClientSearch.iterateControls(System.Windows.Forms.Control.ControlCollection)">
            <summary>
            Traverses all controls on the page using recursion and adds the proper ones
            to their proper collections and adds LostFocus event to Textboxes and Checkboxes
            </summary>
            <param name="controlList"></param>
        </member>
        <member name="M:ClientcardFB3.ClientSearch.loadList">
            <summary>
            Clears Datagrid and Loads the Clients
            </summary>
        </member>
        <member name="M:ClientcardFB3.ClientSearch.sqlConnectionClose">
            <summary>
            Closes a connection to the Database
            </summary>
        </member>
        <member name="M:ClientcardFB3.ClientSearch.sqlConnectionOpen">
            <summary>
            Opens a connection to the Database
            </summary>
        </member>
        <member name="F:ClientcardFB3.ClientSearch.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:ClientcardFB3.ClientSearch.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ClientcardFB3.ClientSearch.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:ClientcardFB3.HHPoints.SetDataValue(System.String,System.String)">
             <summary>
            An Overloaded set of get/set funtions that will take in any kind of data value used in 
            the front end and accsess the data set for that data type, used mostly for a collection
            of textboxes so collection can be itterated through in one loop and have one function called
            no matter what type it actually refrenced
             </summary>
             <param name="FieldName">Fieldname=Column Name in the Database</param>
             <param name="FieldValue">FieldValue= .Net Data type</param>
        </member>
        <member name="M:ClientcardFB3.HHPoints.find(System.Int32,System.Boolean)">
             <summary>
             Finds the UID in dataset and sets that row to the dRow
             </summary>
             <param name="ID"></param>
            
        </member>
        <member name="M:ClientcardFB3.HHPoints.setDataRow(System.Int32)">
            <summary>
            Sets the DataRow for the given RowIndex
            </summary>
            <param name="rowIndex"></param>
        </member>
        <member name="F:ClientcardFB3.SelectDateRange.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:ClientcardFB3.SelectDateRange.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ClientcardFB3.SelectDateRange.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:ClientcardFB3.DailyItemsClass.addItem(System.Data.DataRow,System.Collections.Generic.List{ClientcardFB3.ServiceItem})">
            <summary>
            Add the Item to the Food Items Collection
            </summary>
            <param name="rowIndex">Which Row in the dataset to use</param>
            <param name="svcItm">The list of service items</param>
        </member>
        <member name="M:ClientcardFB3.DailyItemsClass.IsOnSpecialServiceList(System.String)">
            <summary>
            Test whether ItemKey in SpecialServiceList
            </summary>
            <param name="ItemKey"></param>
            <returns>True/False</returns>
        </member>
        <member name="M:ClientcardFB3.DailyItemsClass.checkRule(ClientcardFB3.ServiceItem)">
            <summary>
            Takes a service Item and checks it rule and enforces the rule
            </summary>
            <param name="svc">Service Item</param>
            <returns>Whether or not the item passed the rule</returns>
        </member>
        <member name="M:ClientcardFB3.DateSelectionForm.#ctor(System.Boolean)">
            <summary>
            Coinstructor for the Default Date Picker Form
            </summary>
            <param name="setDfltForApptsIn">True = Default Appoinment Date.  
            False = Default Service Date</param>
        </member>
        <member name="M:ClientcardFB3.DateSelectionForm.LoadCalendarDays">
            <summary>
            Loads the Calendar Days where the foodbank is open
            </summary>
        </member>
        <member name="M:ClientcardFB3.DateSelectionForm.AddDateToCalendar(System.DateTime,System.Boolean,System.String)">
            <summary>
            Fomats the given date to show on calendar that it is an open day
            </summary>
            <param name="OpenDate">Date to format as open date</param>
            <param name="IsCommodity">Is This a Commodity Day</param>
            <param name="SpecialItemList">List of Special Service Items</param>
        </member>
        <member name="F:ClientcardFB3.DateSelectionForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:ClientcardFB3.DateSelectionForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ClientcardFB3.DateSelectionForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:ClientcardFB3.DeleteHousehold.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:ClientcardFB3.DeleteHousehold.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ClientcardFB3.DeleteHousehold.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:ClientcardFB3.Donors.SetDataValue(System.String,System.String)">
             <summary>
            An Overloaded set of get/set funtions that will take in any kind of data value used in 
            the front end and accsess the data set for that data type, used mostly for a collection
            of textboxes so collection can be itterated through in one loop and have one funtion called
            no matter what type it actually refrenced
             </summary>
             <param name="FieldName">Fieldname=Collum Name in the Database</param>
             <param name="FieldValue">FieldValue= .Net Data type</param>
        </member>
        <member name="M:ClientcardFB3.Donors.setDataRow(System.Int32)">
            <summary>
            Sets the DataRow that the get/set accessors work off of using a Row Index
            </summary>
            <param name="rowIndex">The row index to set the drow to</param>
        </member>
        <member name="M:ClientcardFB3.Donors.setRecord(System.Int32)">
            <summary>
            Sets the DataRow of HH Members to be the row index passed in
            </summary>
            <param name="rowIndex">The row index in the dataset</param>
        </member>
        <member name="M:ClientcardFB3.Donors.getDistincts(System.String,System.String)">
            <summary>
            Gets the ditinct values for any collumn
            </summary>
            <param name="columnName">Collumn name</param>
        </member>
        <member name="M:ClientcardFB3.Donors.openConnection">
            <summary>
            Opens a connection to the Database
            </summary>
        </member>
        <member name="M:ClientcardFB3.Donors.closeConnection">
            <summary>
            Closes a connection to the Database
            </summary>
        </member>
        <member name="F:ClientcardFB3.EditAlertForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:ClientcardFB3.EditAlertForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ClientcardFB3.EditAlertForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:ClientcardFB3.EditBackpackForm.getClientsList">
            <summary>
            Gets the CSFP Clients for the given period using a stored procedure
            in the database
            </summary>
        </member>
        <member name="M:ClientcardFB3.EditBackpackForm.getFormatedMonthNumber(System.Int32)">
            <summary>
            Formats the Month To have a Leading Zero if month less than 10
            </summary>
            <param name="month">The Integer Month to Format</param>
            <returns>The Formated Month As A String</returns>
        </member>
        <member name="M:ClientcardFB3.EditBackpackForm.loadList">
            <summary>
            Loads the DataGrid using values obtained in the DataSet
            </summary>
        </member>
        <member name="M:ClientcardFB3.EditBackpackForm.loadList(System.Data.DataRow[])">
            <summary>
            Loads the DataGrid from the DataRows that are passed to the funtion
            </summary>
            <param name="drows">The Array of DataRows to load the data from</param>
        </member>
        <member name="M:ClientcardFB3.EditBackpackForm.openConnection">
            <summary>
            Opens a connection to the Database
            </summary>
        </member>
        <member name="M:ClientcardFB3.EditBackpackForm.closeConnection">
            <summary>
            Closes a connection to the Database
            </summary>
        </member>
        <member name="F:ClientcardFB3.EditBackpackForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:ClientcardFB3.EditBackpackForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ClientcardFB3.EditBackpackForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:ClientcardFB3.EditCSFPForm.getClientsList">
            <summary>
            Gets the CSFP Clients for the given period using a stored procedure
            in the database
            </summary>
        </member>
        <member name="M:ClientcardFB3.EditCSFPForm.getFormatedMonthNumber(System.Int32)">
            <summary>
            Formats the Month To have a Leading Zero if month less than 10
            </summary>
            <param name="month">The Integer Month to Format</param>
            <returns>The Formated Month As A String</returns>
        </member>
        <member name="M:ClientcardFB3.EditCSFPForm.loadList(System.Data.DataRow[])">
            <summary>
            Loads the DataGrid from the DataRows that are passed to the funtion
            </summary>
            <param name="drows">The Array of DataRows to load the data from</param>
        </member>
        <member name="M:ClientcardFB3.EditCSFPForm.openConnection">
            <summary>
            Opens a connection to the Database
            </summary>
        </member>
        <member name="M:ClientcardFB3.EditCSFPForm.closeConnection">
            <summary>
            Closes a connection to the Database
            </summary>
        </member>
        <member name="F:ClientcardFB3.EditCSFPForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:ClientcardFB3.EditCSFPForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ClientcardFB3.EditCSFPForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:ClientcardFB3.SqlBaseDataSet.m_dataSet">
            <summary>
            The dataset that acts as the buffer between the database and the user interface code.
            Technically, the DataSet is the buffer to the DataAdapter and the DataAdapter provides
            the interface to the database.
            </summary>
        </member>
        <member name="F:ClientcardFB3.SqlBaseDataSet.m_dbConnectionString">
            <summary>
            The connection string to access the SQL database. This string is in the format:
            
            	Server={server};Database={dbName};User ID={logon};Password={password};Trusted_Connection=True;
            
            Set the connection string using the ConnectionString property or method.
            </summary>
        </member>
        <member name="F:ClientcardFB3.SqlBaseDataSet.m_dbTableName">
            <summary>
            The name of the SQL table that this class will operate upon. When exporting the data
            to XML this value is also used as the XML record header. This value MUST be set prior
            to performing any database operations. Use the SqlTable property to get/set this
            value. It is initialized to an obviously wrong value to aid in debugging.
            </summary>
        </member>
        <member name="F:ClientcardFB3.SqlBaseDataSet.m_map">
            <summary>
            This structure contains a mapping from the database columns to the edit fields and
            DataGridView columns. This field/column mapping allows the class to move data between
            the grid, display fields, and the columns in the DataSet.
            </summary>
        </member>
        <member name="F:ClientcardFB3.SqlBaseDataSet.m_lastError">
            <summary>
            The text of the last error generated by one of the higher-level methods. For example,
            if the .Open method is called and fails then this value contains the text of the error
            encountered by the .Open method.
            </summary>
        </member>
        <member name="F:ClientcardFB3.SqlBaseDataSet.m_sqlConnection">
            <summary>
            The database connection object. All database access is done through this connection.
            </summary>
        </member>
        <member name="F:ClientcardFB3.SqlBaseDataSet.m_sqlAdapter">
            <summary>
            The adapter that connects the SQL database to the DataSet. If another type of database
            were used then you should change the adapter and all of the code above would remain
            unchanged.
            </summary>
        </member>
        <member name="M:ClientcardFB3.SqlBaseDataSet.#ctor">
            <summary>
            ********** Constructor **********
            </summary>
            <param name="a_connectionString"></param>
        </member>
        <member name="M:ClientcardFB3.SqlBaseDataSet.Finalize">
            <summary>
            ********** Destructor **********
            </summary>
            <param name="a_connectionString"></param>
        </member>
        <member name="M:ClientcardFB3.SqlBaseDataSet.ConnectionStringCreate(System.String,System.String,System.String,System.String)">
            <summary>
            Create and store a database connection string using the specified parameters.
            </summary>
            <param name="a_dbServer">Name of the database server.</param>
            <param name="a_dbName">Name of the database.</param>
            <param name="a_dbLogon">Login ID to the database.</param>
            <param name="a_dbPassword">Database login password.</param>
            <returns>The formatted connection string (also stored in m_dbConnectionString).</returns>
        </member>
        <member name="M:ClientcardFB3.SqlBaseDataSet.DbClose">
            <summary>
            Close the DataSet and connection and free all resources used by the class.
            </summary>
            <param name="a_save">TRUE = save DB updates, FALSE=close without saving.</param>
        </member>
        <member name="M:ClientcardFB3.SqlBaseDataSet.DbInsert">
            <summary>
            SQL command to insert a new record into the database.
            </summary>
        </member>
        <member name="M:ClientcardFB3.SqlBaseDataSet.DbOpen(System.String)">
            <summary>
            Open the database table and read all rows from the database.
            </summary>
            <param name="a_tableName">Read the data from this database table.</param>
            <param name="a_sqlQueryString">Query string used to exact data from database.</param>
            <returns></returns>
        </member>
        <member name="M:ClientcardFB3.SqlBaseDataSet.DbOpen(System.String,System.String)">
            <summary>
            Open the database table using the given query string.
            </summary>
            <param name="a_tableName">Read the data from this database table.</param>
            <param name="a_sqlQueryString">Query string used to exact data from database.</param>
            <returns></returns>
        </member>
        <member name="M:ClientcardFB3.SqlBaseDataSet.DbSave">
            <summary>
            Save the DataSet data to the database.
            </summary>
            <param name="a_save">TRUE = save DB updates, FALSE=close without saving.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "P:ClientcardFB3.SqlBaseDataSet.ConnectionString" -->
        <member name="P:ClientcardFB3.SqlBaseDataSet.DataSetCount">
            <summary>
            Return the number of rows in the DataSet.
            </summary>
        </member>
        <member name="P:ClientcardFB3.SqlBaseDataSet.DataSetHasChanges">
            <summary>
            Return the change status of the DataSet (TRUE if changes were made; FALSE otherwise).
            </summary>
        </member>
        <member name="P:ClientcardFB3.SqlBaseDataSet.DbRowCount">
            <summary>
            Return the number of rows in the current dataset.
            </summary>
        </member>
        <member name="P:ClientcardFB3.SqlBaseDataSet.LastError">
            <summary>
            Return the last error string generated. This is useful when a higher-level method fails
            and you need to view the specific cause of the error.
            </summary>
        </member>
        <member name="P:ClientcardFB3.SqlBaseDataSet.TableName">
            <summary>
            Get or set the name of the SQL table used by this class.
            </summary>
        </member>
        <member name="T:ClientcardFB3.SqlBaseDataSet.TYPE_FIELD_MAP">
            <summary>
            This structure defines the columns in the data record and the input field and grid
            column used to display the database column field data.
            </summary>
        </member>
        <member name="M:ClientcardFB3.SqlBaseDataSet.TYPE_FIELD_MAP.AddGridColumn(System.String,System.String)">
            <summary>
            Add a field/grid mapping for the database column.
            </summary>
            <param name="?"></param>
            <returns></returns>
        </member>
        <member name="M:ClientcardFB3.SqlBaseDataSet.TYPE_FIELD_MAP.AddControl(System.String,System.String,System.Windows.Forms.Control)">
            <summary>
            Add a field/grid mapping for the database column.
            </summary>
            <param name="?"></param>
            <returns></returns>
        </member>
        <member name="M:ClientcardFB3.SqlBaseDataSet.TYPE_FIELD_MAP.New(System.Int32)">
            <summary>
            Add a field/grid mapping for the database column.
            </summary>
            <param name="?"></param>
            <returns></returns>
        </member>
        <member name="P:ClientcardFB3.SqlBaseDataSet.TYPE_FIELD_MAP.Count">
            <summary>
            Return the number of DB columns defined in this database table row.
            </summary>
        </member>
        <member name="F:ClientcardFB3.SqlGridDataSet.COLUMN_IDX_DATA_SET">
            <summary>
            This is the name of the column that is added to the DataGridView used to display the
            UI fields. This field is populated with the record number in the DataSet so that the
            proper DataSet record can be accessed easily if the grid is reordered.
            </summary>
        </member>
        <member name="F:ClientcardFB3.SqlGridDataSet.m_colorBackground">
            <summary>
            Normal dialog background color.
            </summary>
        </member>
        <member name="F:ClientcardFB3.SqlGridDataSet.m_colorEdit">
            <summary>
            Dialog background color when editing a record if the application uses a different
            background color when editing.
            </summary>
        </member>
        <member name="F:ClientcardFB3.SqlGridDataSet.m_controlPage">
            <summary>
            This is the page on which the controls and fields are displayed. This can be a dialog
            box, tab control page, etc. You must set this value in order to have this class perform
            I/O on the data fields.
            </summary>
        </member>
        <member name="F:ClientcardFB3.SqlGridDataSet.m_dataGrid">
            <summary>
            Display the database row fields in this DataGridView control.
            </summary>
        </member>
        <member name="F:ClientcardFB3.SqlGridDataSet.m_displayEntireGridRow">
            <summary>
            If TRUE then the entire grid row is a selected when a cell is selected.
            </summary>
        </member>
        <member name="F:ClientcardFB3.SqlGridDataSet.m_editEnabled">
            <summary>
            TRUE if the record fields are enabled for editing and FALSE if they are disabled.
            </summary>
        </member>
        <member name="F:ClientcardFB3.SqlGridDataSet.m_noFormControls">
            <summary>
            Number of controls on the form that map to database columns. DisplayGrid uses this
            value to optomize performance when there are no input controls on the form (such as
            when only a grid is used to display the database columns).
            </summary>
        </member>
        <member name="M:ClientcardFB3.SqlGridDataSet.ClearFields">
            <summary>
            Clear all of the user fields on the current input form.
            </summary>
        </member>
        <member name="M:ClientcardFB3.SqlGridDataSet.ClearFields(System.String)">
            <summary>
            Set all of the user fields on the current input form to the specific value. Normally
            you test your field definitions by setting the fields to a non-blank value to make sure
            that the fields were defined properly.
            </summary>
            <param name="a_value">Set all fields on the page to this value.</param>
        </member>
        <member name="M:ClientcardFB3.SqlGridDataSet.GetControlValue(System.Windows.Forms.Control)">
            <summary>
            Get the value of the specified control and return it as a string. Valid control types:
            
            		Control				Value Returned
            		-----------			----------------------------------------------
            		CheckBox			"True" if checked, "False" if not checked.
            		ComboBox			Text in edit field of ComboBox.
            		TextBox				Text in TextBox.
            		
            </summary>
            <param name="a_value">Set all fields on the page to this value.</param>
        </member>
        <member name="M:ClientcardFB3.SqlGridDataSet.SetControlValue(System.Windows.Forms.Control,System.String)">
            <summary>
            Set the value of the specified control.
            </summary>
            <param name="a_value">Set all fields on the page to this value.</param>
        </member>
        <member name="M:ClientcardFB3.SqlGridDataSet.DataSetValue(System.Int32,System.String)">
            <summary>
            Return the value from the DataSet of the specified column of the DataGridView record.
            </summary>
            <param name="a_row">Retrieve data from this row in the DataSet (-1 to retrieve data
            from the DataSet row that corresponds to the current row in the DataGridView).</param>
            <param name="a_column">Return the value of the column in current row.</param>
            <returns></returns>
        </member>
        <member name="M:ClientcardFB3.SqlGridDataSet.DataSetValue(System.Int32,System.String,System.String)">
            <summary>
            Set the value from the DataSet of the specified column of the DataGridView record.
            </summary>
            <param name="a_row">Set data in this row in the DataSet (-1 to retrieve data
            from the DataSet row that corresponds to the current row in the DataGridView).</param>
            <param name="a_column">Set the value of the column in a_row.</param>
            <returns></returns>
        </member>
        <member name="M:ClientcardFB3.SqlGridDataSet.DataSetValue(System.Int32,System.Int32,System.String)">
            <summary>
            Set the value from the DataSet of the specified column of the DataGridView record.
            </summary>
            <param name="a_row">Retrieve data from this row in the DataSet (-1 to retrieve data
            from the DataSet row that corresponds to the current row in the DataGridView).</param>
            <param name="a_column">Return the value of the column in current row.</param>
            <returns></returns>
        </member>
        <member name="M:ClientcardFB3.SqlGridDataSet.DbOpenToGrid(System.String)">
            <summary>
            Open the database table and read all rows from the database.
            </summary>
            <param name="a_tableName">Read the data from this database table.</param>
            <param name="a_sqlQueryString">Query string used to exact data from database.</param>
            <returns></returns>
        </member>
        <member name="M:ClientcardFB3.SqlGridDataSet.DbOpenToGrid(System.String,System.String)">
            <summary>
            Open the database table using the given query string.
            </summary>
            <param name="a_tableName">Read the data from this database table.</param>
            <param name="a_sqlQueryString">Query string used to exact data from database.</param>
            <returns></returns>
        </member>
        <member name="M:ClientcardFB3.SqlGridDataSet.DisplayGrid">
            <summary>
            Display the data in the DataSet in the DataGridView. Note that the DataGridView column
            properties do not expose the .Tag property. This property must be set using the
            SetGridColumn method to map each database column to a column in the DataGridView.
            </summary>
        </member>
        <member name="M:ClientcardFB3.SqlGridDataSet.DisplayGridLine(System.Int32)">
            <summary>
            Display the DataGridView row with the data in the specified row in the DataSet. Use
            this method when there is a one-to-one relationsship between the rows in the DataSet
            and the rows in the DataGridView.
            </summary>
            <param name="a_row">Display the data in this row of the DataSet to the same row of the
            DataGridView.</param>
            <returns>TRUE if the data was display, FALSE if an error occurred.</returns>
        </member>
        <member name="M:ClientcardFB3.SqlGridDataSet.DisplayGridLine(System.Int32,System.Int32)">
            <summary>
            Display the specified DataSet row data in the specified row in the DataGridView. Use
            this method when the DataGridView contains a subset of the data in the DataSet.
            </summary>
            <param name="a_dataSetRow">Display the data in this row of the DataSet.</param>
            <param name="a_gridRow">Display the data in this row of the DataGridView.</param>
            <returns>TRUE if the data was display, FALSE if an error occurred.</returns>
        </member>
        <member name="M:ClientcardFB3.SqlGridDataSet.DisplayGridLineSpecial(System.Int32,System.Int32)">
            <summary>
            The application can override this method to provide any special processing required to
            populate the columns in the DataGridView. The class displays the string values stored
            in the database but the derived class can add additional process if that is required.
            </summary>
        </member>
        <member name="M:ClientcardFB3.SqlGridDataSet.Event_FormClosing(System.Object,System.Windows.Forms.FormClosingEventArgs)">
            <summary>
            Prompt user to save data if changes were made and handle the form closing details. This
            method is normally called from the dialog FormClosing event. Do not call this method
            directly from the dialog because the Designer will generate a warning. As a workaround
            for this Designer issue just create a FormClosing event handler and call this method.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ClientcardFB3.SqlGridDataSet.Event_GridSelectionChanged(System.Object,System.EventArgs)">
            <summary>
            Display the database column values in the form controls.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ClientcardFB3.SqlGridDataSet.Event_SelectionChangedSpecial(System.Int32)">
            <summary>
            Use this override method to do any special processing of the current record data. The
            normal event handler simply moves the data to the display fields but you may need to
            convert the record to another format in order for it to display properly.
            </summary>
        </member>
        <member name="M:ClientcardFB3.SqlGridDataSet.GridCurrentRow">
            <summary>
            Return the row of the currently selected grid cell (makes code easier to read).
            </summary>
        </member>
        <member name="M:ClientcardFB3.SqlGridDataSet.GridCurrentRow(System.Int32)">
            <summary>
            Return the row of the currently selected grid cell (makes code easier to read).
            </summary>
        </member>
        <member name="M:ClientcardFB3.SqlGridDataSet.MapDbColumnsToUiFields(System.Windows.Forms.Control.ControlCollection)">
            <summary>
            This method maps the columns in the database to control objects on the current user
            UI form. UI controls are mapped to a database column by adding d={columnName} in the
            .Tag property of the control. 
            </summary>
        </member>
        <member name="M:ClientcardFB3.SqlGridDataSet.MoveDataSetToDisplay(System.Int32)">
            <summary>
            Move the data from the DataSet to the display objects on the current form. The form
            control objects use the .Tag property to map the database column name to the form
            object (set the .Tag property to d={dbColumnName}).
            </summary>
        </member>
        <member name="M:ClientcardFB3.SqlGridDataSet.MoveDisplayToDataSet">
            <summary>
            Move the data from the display objects on the current form to the DataSet. The form
            control objects use the .Tag property to map the database column name to the form
            object (set the .Tag property to d={dbColumnName}).
            </summary>
        </member>
        <member name="M:ClientcardFB3.SqlGridDataSet.RowInsert">
            <summary>
            Insert the current record into the DataSet.
            </summary>
            <returns>TRUE if the row was inserted into database, FALSE if an error occurred.</returns>
        </member>
        <member name="M:ClientcardFB3.SqlGridDataSet.RowDeleteCurrent(System.Boolean)">
            <summary>
            Delete the current row in the DataGridView from the database.
            </summary>
            <param name="a_userPrompt">TRUE if a user prompt is to be issued, FALSE if no prompting.</param>
            <returns>TRUE if record deleted; FALSE if an error occurred or no record to delete.</returns>
        </member>
        <member name="M:ClientcardFB3.SqlGridDataSet.SetGridColumn(System.String,System.String)">
            <summary>
            Map the grid column to a database column. The DataGridView column properties do not
            include the .Tag property so the application must set the .Tag property manually.
            ***** IMPORTANT *****
            Call this method AFTER the application opens the database table. When the DB table
            is opened the mapping structure is cleared and re-populated. If the grid column
            map is set before the Open then all of the values will be erased!
            </summary>
            <param name="a_dbColumn">Map this database column to the specified grid column.</param>
            <param name="a_gridColumn">Map the DB column to this grid column.</param>
            <returns></returns>
        </member>
        <member name="M:ClientcardFB3.SqlGridDataSet.ValidateMapping">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:ClientcardFB3.SqlGridDataSet.ColorBackground">
            <summary>
            Get/Set the background color for the normal dialog.
            </summary>
        </member>
        <member name="P:ClientcardFB3.SqlGridDataSet.ColorEdit">
            <summary>
            Get/Set the background color when in EDIT mode.
            </summary>
        </member>
        <member name="P:ClientcardFB3.SqlGridDataSet.ControlPage">
            <summary>
            Set or get the current control page. This is the page on which the data and controls
            are displayed. You must set this value to use any of the functions for displaying or
            saving the user fields. The control page can be a dialog box, tab page, etc.
            </summary>
        </member>
        <member name="P:ClientcardFB3.SqlGridDataSet.DisplayEntireGridRow">
            <summary>
            If set then the entire DataGridView row is selected when any cell in that row is
            selected. If not set then the cells in the DataGridView are selected individually. This
            property defaults to TRUE if there are UI fields mapped to one or more columns in the
            DataSet. This property defaults to FALSE if no UI fields are mapped to the DataSet
            columns. The application can override these settings after the .Open call.
            </summary>
        </member>
        <member name="P:ClientcardFB3.SqlGridDataSet.DataGridViewObject">
            <summary>
            Get/Set the value of the DataGridView object used to display the database data (or a
            subset of the DB data)
            </summary>
        </member>
        <member name="P:ClientcardFB3.SqlGridDataSet.DatasetRowOfGridRow">
            <summary>
            Get the DataSet row for the current DataGridView row. A hidden column (IDX_DATA_SET)
            was added to the DataGridView with the DataSet was displayed. The IDX_DATA_SET column
            contains the index into the DataSet for the DataGridView row. Use the value in this
            column to access the correct DataSet record regardless of the sort used in the grid.
            </summary>
        </member>
        <member name="P:ClientcardFB3.SqlGridDataSet.EditEnabled">
            <summary>
            Enable/Disable all of the edit fields defined for the current record (focus on 1st field)
            or return the current edit status.
            </summary>
        </member>
        <member name="P:ClientcardFB3.SqlGridDataSet.GridSelectionHandlerEnabled">
            <summary>
            Enable/Disable the SelectionChanged event handler for the DataGridView object.
            </summary>
        </member>
        <member name="F:ClientcardFB3.EditDonorForm.m_selectedId">
            <summary>
            When running in SELECT mode then return the value of the record ID columnm.
            </summary>
        </member>
        <member name="F:ClientcardFB3.EditDonorForm.m_formSelectMode">
            <summary>
            If FALSE then use the form in normal edit mode and if TRUE then operate in SELECT mode.
            </summary>
        </member>
        <member name="M:ClientcardFB3.EditDonorForm.traverseAndAddControlsToCollections(System.Windows.Forms.Control.ControlCollection)">
            <summary>
            Traverses all controls on the page using recursion and adds the proper ones
            to their proper collections and adds LostFocus event to Textboxes and Checkboxes
            </summary>
            <param name="controlList"></param>
        </member>
        <member name="M:ClientcardFB3.EditDonorForm.btnAdd_Click(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ClientcardFB3.EditDonorForm.btnCancel_Click(System.Object,System.EventArgs)">
            <summary>
            Restore the contents of the original record (after prompting the user).
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ClientcardFB3.EditDonorForm.btnClose_Click(System.Object,System.EventArgs)">
            <summary>
            If the data was changed then save those updates to the database.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ClientcardFB3.EditDonorForm.btnDelete_Click(System.Object,System.EventArgs)">
            <summary>
            Delete the current row.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ClientcardFB3.EditDonorForm.btnEdit_Click(System.Object,System.EventArgs)">
            <summary>
            Toggle edit/non-edit mode.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ClientcardFB3.EditDonorForm.btnSelect_Click(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ClientcardFB3.EditDonorForm.DisplayControls(ClientcardFB3.EditDonorForm.STATE)">
            <summary>
            Set the state of the controls on the form.
            </summary>
            <param name="a_state"></param>
        </member>
        <member name="M:ClientcardFB3.EditDonorForm.DisplayGridLineSpecial(System.Int32,System.Int32)">
            <summary>
            Special handling is required to display the TypeCode value in the DataGridView. This
            method provides the necessary processing to the base class.
            </summary>
        </member>
        <member name="M:ClientcardFB3.EditDonorForm.EditDonorForm_FormClosing(System.Object,System.Windows.Forms.FormClosingEventArgs)">
            <summary>
            Close the form and return an invalid record ID.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ClientcardFB3.EditDonorForm.EditDonorForm_Load(System.Object,System.EventArgs)">
            <summary>
            Read the Type Codes database table and display the data in a DataGridView control.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ClientcardFB3.EditDonorForm.EditDonorForm_VisibleChanged(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ClientcardFB3.EditDonorForm.Event_SelectionChangedSpecial(System.Int32)">
            <summary>
            Do some special handling to convert the row data to the display format.
            </summary>
            <param name="a_row">The row being processed.</param>
        </member>
        <member name="M:ClientcardFB3.EditDonorForm.loadUserFieldLabels">
            <summary>  Loads User Check Box Labels from UserFields Table
            </summary>
        </member>
        <member name="M:ClientcardFB3.EditDonorForm.getDistints(System.String)">
            <summary>
            Retrives all distinct values for a given column Name in the Household Table
            </summary>
            <param name="colName">The Name of the Column to get distincts for</param>
        </member>
        <member name="F:ClientcardFB3.EditDonorForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:ClientcardFB3.EditDonorForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ClientcardFB3.EditDonorForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:ClientcardFB3.EditDonorForm.SelectedId">
            <summary>
            Return the record ID for the selected record in the grid (used in SELECT mode). This
            value is only populated in the SELECT button.
            </summary>
        </member>
        <member name="P:ClientcardFB3.EditDonorForm.FormSelectMode">
            <summary>
            If FALSE then use the form in normal edit mode and if TRUE then operate in SELECT mode.
            </summary>
        </member>
        <member name="T:ClientcardFB3.EditDonorForm.STATE">
            <summary>
            The functional state of the form. Used by DisplayControls to set the state of the
            controls.
            </summary>
        </member>
        <member name="F:ClientcardFB3.EditPreferencesForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:ClientcardFB3.EditPreferencesForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ClientcardFB3.EditPreferencesForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:ClientcardFB3.EditServiceShortForm.traverseAndAddControlsToCollections(System.Windows.Forms.Control.ControlCollection)">
            <summary>
            Traverses all controls on the page using recursion and adds the proper ones
            to their proper collections and adds LostFocus event to Textboxes and Checkboxes
            </summary>
            <param name="controlList"></param>
        </member>
        <member name="F:ClientcardFB3.EditServiceShortForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:ClientcardFB3.EditServiceShortForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ClientcardFB3.EditServiceShortForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:ClientcardFB3.EditTypeCodes.m_editColumn">
            <summary>
            Set this flag (in the CellBeginEdit handler) when a cell is being edited. This flag is
            used in the validation method so that it only checks cells that have been edited.
            </summary>
        </member>
        <member name="F:ClientcardFB3.EditTypeCodes.m_dataChanged">
            <summary>
            This flag is TRUE if any data in the grid was modified. It is used when closing the
            dialog to determine how to handle database updates.
            </summary>
        </member>
        <member name="F:ClientcardFB3.EditTypeCodes.m_typeCodeList">
            <summary>
            The list of all Type Code lists. Select the proper Type Code list from a combo box.
            </summary>
        </member>
        <member name="F:ClientcardFB3.EditTypeCodes.m_typeCodeTable">
            <summary>
            This string array contains the database table names for each Type Code list.
            </summary>
        </member>
        <member name="F:ClientcardFB3.EditTypeCodes.m_typeCodeFields">
            <summary>
            This string array contains the database table and field name for each Type Code list.
            </summary>
        </member>
        <member name="F:ClientcardFB3.EditTypeCodes.m_updatetypeCodeFields">
            <summary>
            This string array contains the database table and field name for each Type Code list.
            </summary>
        </member>
        <member name="M:ClientcardFB3.EditTypeCodes.#ctor(System.String)">
            <summary>
            *****Constructor*****
            </summary>
            <param name="a_dbServer">Connect to the database on this server.</param>
            <param name="a_dbName">Connect to this database.</param>
            <param name="a_dbLogoin">User ID to connect to the SQL database.</param>
            <param name="a_dbPassword">Password to connect to the SQL database.</param>
            <param name="a_dbTable">Database table that contains the Type Codes.</param>
            <param name="a_title">Used for dialog title, etc.</param>
        </member>
        <member name="M:ClientcardFB3.EditTypeCodes.AreTypeCodesUsed">
            <summary>
            Check if the current Type Code value (ID field) is used in any of the ClientCard
            database tables. We have not determined what to do if the Type Code is used but the
            hook is here.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClientcardFB3.EditTypeCodes.btn_Add_Click(System.Object,System.EventArgs)">
            <summary>
            Add the new Type Code (must be unique) to the grid view.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ClientcardFB3.EditTypeCodes.btn_Close_Click(System.Object,System.EventArgs)">
            <summary>
            Clear the data in the Type Codes table and replace it with the updated data in the
            list structure. If no data was changed then leave the current table intact.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ClientcardFB3.EditTypeCodes.btn_Update_Click(System.Object,System.EventArgs)">
            <summary>
            Update the edits made to the row data.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ClientcardFB3.EditTypeCodes.cboTypeCodes_TableName_SelectedIndexChanged(System.Object,System.EventArgs)">
            <summary>
            Display the selected Type Code table and set the controls.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ClientcardFB3.EditTypeCodes.DisplayControls(ClientcardFB3.EditTypeCodes.STATE)">
            <summary>
            Set the state of the controls on the form.
            </summary>
            <param name="a_state"></param>
        </member>
        <member name="M:ClientcardFB3.EditTypeCodes.DisplayGridLineSpecial(System.Int32,System.Int32)">
            <summary>
            This method adds the DELETE button when the base class displays a line in the 
            DataGridView.
            </summary>
            <param name="a_dataSetRow"></param>
            <param name="a_gridRow"></param>
            <returns></returns>
        </member>
        <member name="M:ClientcardFB3.EditTypeCodes.EditTypeCodes_FormClosing(System.Object,System.Windows.Forms.FormClosingEventArgs)">
            <summary>
            Close the form and prompt the user to save the data if it was modified.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ClientcardFB3.EditTypeCodes.EditTypeCodes_Load(System.Object,System.EventArgs)">
            <summary>
            Read the Type Codes database table and display the data in a DataGridView control.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ClientcardFB3.EditTypeCodes.EditTypeCodes_Shown(System.Object,System.EventArgs)">
            <summary>
            Final dialog tweeks after all controls have been drawn.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ClientcardFB3.EditTypeCodes.Event_SelectionChangedSpecial(System.Int32)">
            <summary>
            Use this override method to do any special processing of the current record data. The
            normal event handler simply moves the data to the display fields but you may need to
            convert the record to another format in order for it to display properly.
            </summary>
        </member>
        <member name="M:ClientcardFB3.EditTypeCodes.FindValueInColumn(System.String,System.String,System.String)">
            <summary>
            Search the column in the grid view object for the specified value. This is normally
            used to make sure the value is unique.
            </summary>
            <param name="columnName">The name of the DataGridView column to check.</param>
            <param name="a_value">Check the column for this value.</param>
            <returns>The row number where the value was found or -1 if the value was not found.</returns>
        </member>
        <member name="M:ClientcardFB3.EditTypeCodes.grid_CellBeginEdit(System.Object,System.Windows.Forms.DataGridViewCellCancelEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ClientcardFB3.EditTypeCodes.grid_CellClick(System.Object,System.Windows.Forms.DataGridViewCellEventArgs)">
            <summary>
            Detect the DELETE button and delete the row from the grid and the database. Re-order
            the Sort Order values and decrement the values that are greater than the one deleted.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ClientcardFB3.EditTypeCodes.Save">
            <summary>
            Replace the contents of the TypeCodes table with the contents of the m_typeCodes list.
            The m_typeCodes list will mirror the contents of the DataGridView although the grid
            data may be displayed in a different order (user can change sort order).
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClientcardFB3.EditTypeCodes.txt_Type_Leave(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ClientcardFB3.EditTypeCodes.txt_Add_TextChanged(System.Object,System.EventArgs)">
            <summary>
            Enable the ADD button if this field contains data and disable it if there is no data.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ClientcardFB3.EditTypeCodes.Validate_SortOrder">
            <summary>
            Validate the field at the CellEndEdit event. The SortOrder values be unique. If the
            value is not unique then reorder the list. For example, if there are 6 records:
            
            		1							1		change 2old to			1
            		2							2old	3 and reorder			2new
            		3      ==========>>			3		2old thru 6				3 (formerly 2old)
            		4							4								4 (formerly 3)
            		5 (user changes to 2)		2new   =================>>		5 (formerly 4)
            		6							6								6 (unchanged)
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClientcardFB3.EditTypeCodes.ValidateEditedCell">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:ClientcardFB3.EditTypeCodes.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:ClientcardFB3.EditTypeCodes.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ClientcardFB3.EditTypeCodes.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:ClientcardFB3.EditTypeCodes.CurrentColumn">
            <summary>
            Return the column of the currently selected grid cell (makes code easier to read).
            </summary>
        </member>
        <member name="P:ClientcardFB3.EditTypeCodes.CurrentRow">
            <summary>
            Return the row of the currently selected grid cell (makes code easier to read).
            </summary>
        </member>
        <member name="P:ClientcardFB3.EditTypeCodes.CurrentCellValue">
            <summary>
            Return the value in the currently selected grid cell (makes code easier to read).
            </summary>
        </member>
        <member name="P:ClientcardFB3.EditTypeCodes.DataChanged">
            <summary>
            Returns TRUE if data was changed on the form. The calling code normally uses this
            property after the Dialog.Show. This class manages data used by other controls on the
            main application forms. After calling this class the application can check the
            DataChanged property to see if the controls on the main form need to be updated.
            </summary>
        </member>
        <member name="T:ClientcardFB3.EditTypeCodes.STATE">
            <summary>
            The functional state of the form. Used by DisplayControls to set the state of the
            controls.
            </summary>
        </member>
        <member name="M:ClientcardFB3.EditUserFields.btnSave_Click(System.Object,System.EventArgs)">
            <summary>
            Clear the data in the Type Codes table and replace it with the updated data in the
            list structure. If no data was changed then leave the current table intact.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ClientcardFB3.EditUserFields.cboTable_Select_SelectedIndexChanged(System.Object,System.EventArgs)">
            <summary>
            Display the selected Type Code table and set the controls.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ClientcardFB3.EditUserFields.checkForEmptyAlertText">
            <summary>
            Checks the dataset for rows where AutoAlert = true but No text is entered
            It then puts the edit lable in the AutoAlertText Field
            </summary>
        </member>
        <member name="M:ClientcardFB3.EditUserFields.csmGridUserFields_Opening(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            Event that triggers when the Context Menue Strip Opens.
            Sets Proper Visibility of the Items For the DataGrid's CurrentRow's field.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ClientcardFB3.EditUserFields.EditUserFields_FormClosing(System.Object,System.Windows.Forms.FormClosingEventArgs)">
            <summary>
            Close the form and prompt the user to save the data if it was modified.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ClientcardFB3.EditUserFields.EditUserFields_Load(System.Object,System.EventArgs)">
            <summary>
            Read the Type Codes database table and display the data in a DataGridView control.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ClientcardFB3.EditUserFields.fillTableNamesCombo">
            <summary>
            Fills the table selection combo with the distinc table names in database
            </summary>
        </member>
        <member name="M:ClientcardFB3.EditUserFields.grid_CellBeginEdit(System.Object,System.Windows.Forms.DataGridViewCellCancelEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ClientcardFB3.EditUserFields.grid_CellClick(System.Object,System.Windows.Forms.DataGridViewCellEventArgs)">
            <summary>
            Detect the DELETE button and delete the row from the grid and the database. Re-order
            the Sort Order values and decrement the values that are greater than the one deleted.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ClientcardFB3.EditUserFields.loadList">
            <summary>
            Loads the list of UserDefinedFields
            </summary>
        </member>
        <member name="M:ClientcardFB3.EditUserFields.resetValue(System.String,System.String)">
            <summary>
            Gets Confirmation from user that they actually do want to reset UserField
            and then calls the clsUserFields reset method.
            </summary>
            <param name="value">The New Value (ie 0 or 1)</param>
            <param name="confirmationDisplayValue">The Value To Display in the MessageBox (ie Checked, Unchecked, 0)</param>
        </member>
        <member name="F:ClientcardFB3.EditUserFields.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:ClientcardFB3.EditUserFields.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ClientcardFB3.EditUserFields.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:ClientcardFB3.EditUserFields.DataChanged">
            <summary>
            Returns TRUE if data was changed on the form. The calling code normally uses this
            property after the Dialog.Show. This class manages data used by other controls on the
            main application forms. After calling this class the application can check the
            DataChanged property to see if the controls on the main form need to be updated.
            </summary>
        </member>
        <member name="F:ClientcardFB3.EditVolunteerForm.m_selectedId">
            <summary>
            When running in SELECT mode then return the value of the record ID columnm.
            </summary>
        </member>
        <member name="F:ClientcardFB3.EditVolunteerForm.m_formSelectMode">
            <summary>
            If FALSE then use the form in normal edit mode and if TRUE then operate in SELECT mode.
            </summary>
        </member>
        <member name="M:ClientcardFB3.EditVolunteerForm.#ctor(System.String)">
            <summary>
            ***** Constructor *****
            </summary>
        </member>
        <member name="M:ClientcardFB3.EditVolunteerForm.EditVolunteerForm_FormClosing(System.Object,System.Windows.Forms.FormClosingEventArgs)">
            <summary>
            If data has changed then prompt the user to save the data before closing the dialog.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ClientcardFB3.EditVolunteerForm.btnAdd_Click(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ClientcardFB3.EditVolunteerForm.btnCancel_Click(System.Object,System.EventArgs)">
            <summary>
            Restore the contents of the original record (after prompting the user).
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ClientcardFB3.EditVolunteerForm.btnClose_Click(System.Object,System.EventArgs)">
            <summary>
            If the data was changed then save those updates to the database.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ClientcardFB3.EditVolunteerForm.btnDelete_Click(System.Object,System.EventArgs)">
            <summary>
            Delete the current row.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ClientcardFB3.EditVolunteerForm.btnEdit_Click(System.Object,System.EventArgs)">
            <summary>
            Toggle edit/non-edit mode.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ClientcardFB3.EditVolunteerForm.btnSelect_Click(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ClientcardFB3.EditVolunteerForm.DisplayControls(ClientcardFB3.EditVolunteerForm.STATE)">
            <summary>
            Set the state of the controls on the form.
            </summary>
            <param name="a_state"></param>
        </member>
        <member name="M:ClientcardFB3.EditVolunteerForm.DisplayGridLineSpecial(System.Int32,System.Int32)">
            <summary>
            Special handling is required to display the TypeCode value in the DataGridView. This
            method provides the necessary processing to the base class.
            </summary>
        </member>
        <member name="M:ClientcardFB3.EditVolunteerForm.EditVolForm_btnAdd_Click(System.Object,System.EventArgs)">
            <summary>
            Clear the input fields, put them in edit mode, and set the buttons properly.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ClientcardFB3.EditVolunteerForm.EditVolForm_Load(System.Object,System.EventArgs)">
            <summary>
            Read the Type Codes database table and display the data in a DataGridView control.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ClientcardFB3.EditVolunteerForm.getDistints(System.String)">
            <summary>
            Retrives all distinct values for a given column Name in the Household Table
            </summary>
            <param name="colName">The Name of the Column to get distincts for</param>
        </member>
        <member name="M:ClientcardFB3.EditVolunteerForm.loadUserFieldLabels">
            <summary>  Loads User Check Box Labels from UserFields Table
            </summary>
        </member>
        <member name="M:ClientcardFB3.EditVolunteerForm.traverseAndAddControlsToCollections(System.Windows.Forms.Control.ControlCollection)">
            <summary>
            Traverses all controls on the page using recursion and adds the proper ones
            to their proper collections and adds LostFocus event to Textboxes and Checkboxes
            </summary>
            <param name="controlList"></param>
        </member>
        <member name="F:ClientcardFB3.EditVolunteerForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:ClientcardFB3.EditVolunteerForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ClientcardFB3.EditVolunteerForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:ClientcardFB3.EditVolunteerForm.FormSelectMode">
            <summary>
            If FALSE then use the form in normal edit mode and if TRUE then operate in SELECT mode.
            </summary>
        </member>
        <member name="P:ClientcardFB3.EditVolunteerForm.SelectedId">
            <summary>
            Return the record ID for the selected record in the grid (used in SELECT mode). This
            value is only populated in the SELECT button.
            </summary>
        </member>
        <member name="T:ClientcardFB3.EditVolunteerForm.STATE">
            <summary>
            The functional state of the form. Used by DisplayControls to set the state of the
            controls.
            </summary>
        </member>
        <member name="F:ClientcardFB3.EditVouchersItemForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:ClientcardFB3.EditVouchersItemForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ClientcardFB3.EditVouchersItemForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:ClientcardFB3.EmailBodyInputForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:ClientcardFB3.EmailBodyInputForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ClientcardFB3.EmailBodyInputForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:ClientcardFB3.FBJobsPlan.SetRecord(System.Int32)">
            <summary>
            Sets the DataRow of HH Members to be the row index passed in
            </summary>
            <param name="rowIndex">The row index in the dataset</param>
        </member>
        <member name="F:ClientcardFB3.FBJobsPlanForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:ClientcardFB3.FBJobsPlanForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ClientcardFB3.FBJobsPlanForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:ClientcardFB3.FoodDonations.SetDataValue(System.String,System.String)">
             <summary>
            An Overloaded set of get/set funtions that will take in any kind of data value used in 
            the front end and accsess the data set for that data type, used mostly for a collection
            of textboxes so collection can be itterated through in one loop and have one funtion called
            no matter what type it actually refrenced
             </summary>
             <param name="FieldName">Fieldname=Collum Name in the Database</param>
             <param name="FieldValue">FieldValue= .Net Data type</param>
        </member>
        <member name="M:ClientcardFB3.FoodDonations.setDataRow(System.Int32)">
            <summary>
            Sets the DataRow that the get/set accessors work off of using a Row Index
            </summary>
            <param name="rowIndex">The row index to set the drow to</param>
        </member>
        <member name="M:ClientcardFB3.FoodDonations.openConnection">
            <summary>
            Opens a connection to the Database
            </summary>
        </member>
        <member name="M:ClientcardFB3.FoodDonations.closeConnection">
            <summary>
            Closes a connection to the Database
            </summary>
        </member>
        <member name="M:ClientcardFB3.FoodDonationsForm.#ctor">
            <summary>
            Constructor for the FoodDonations Form
            </summary>
        </member>
        <member name="M:ClientcardFB3.FoodDonationsForm.btnBrowse_Click(System.Object,System.EventArgs)">
            <summary>
            Opens the Edit Donors Form so that a user can select which Donor
            made the donation
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ClientcardFB3.FoodDonationsForm.btnClose_Click(System.Object,System.EventArgs)">
            <summary>
            Cnacles out of the Edit Donors Form
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ClientcardFB3.FoodDonationsForm.btnEditDnrTrx_Click(System.Object,System.EventArgs)">
            <summary>
            This event fires when the user hit the button to
            edit an existing donation
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ClientcardFB3.FoodDonationsForm.btnFirstDL_Click(System.Object,System.EventArgs)">
            <summary>
            Event fires when the user clicks on the First Donation Button
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ClientcardFB3.FoodDonationsForm.btnLastDL_Click(System.Object,System.EventArgs)">
            <summary>
            Event fires when the user clicks on the Last Donation Date Button
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ClientcardFB3.FoodDonationsForm.btnLogEntryCancel_Click(System.Object,System.EventArgs)">
            <summary>
            Fires when the user clicks on button to cancel out of
            Add/Edit Log Entry
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ClientcardFB3.FoodDonationsForm.btnLogEntrySave_Click(System.Object,System.EventArgs)">
            <summary>
            Event fires when the user clicks on the Save buton
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ClientcardFB3.FoodDonationsForm.btnNewDonation_Click(System.Object,System.EventArgs)">
            <summary>
            Event Fires when the user clicks on the new Donation Button
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ClientcardFB3.FoodDonationsForm.btnNextDL_Click(System.Object,System.EventArgs)">
            <summary>
            Event fires when user clicks on the Next Donation Date Button
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ClientcardFB3.FoodDonationsForm.btnPrevDL_Click(System.Object,System.EventArgs)">
            <summary>
            Event Fires when the User clicks on the 
            previous donoation date button
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ClientcardFB3.FoodDonationsForm.dtDateDL_ValueChanged(System.Object,System.EventArgs)">
            <summary>
            Event fires when the DatePicker valuse changes
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ClientcardFB3.FoodDonationsForm.fillDonationDates">
            <summary>
            Fills the Collection of Donation Dates
            </summary>
        </member>
        <member name="M:ClientcardFB3.FoodDonationsForm.fillgbLogEntryControls(System.String)">
            <summary>
            Used when an edit of a foodDonation happens
            Loads the textboxes with the data from the 
            dataset
            Called after the Find() is called for the foodDonation
            </summary>
        </member>
        <member name="M:ClientcardFB3.FoodDonationsForm.initNewDonationGB">
            <summary>
            Initializes the New/Edit Donation Groupbox to
            Blank textboxes and proper selected indexes
            </summary>
        </member>
        <member name="M:ClientcardFB3.FoodDonationsForm.loadDonationLogList">
            <summary>
            Loads the Donation Log with the Donations for the selected date
            </summary>
        </member>
        <member name="M:ClientcardFB3.FoodDonationsForm.loadDonorLogList">
            <summary>
            Loads the Donor log listView with the donoations for the 
            Selected donor
            </summary>
        </member>
        <member name="M:ClientcardFB3.FoodDonationsForm.changedMode">
            <summary>
            Changes the current mode from view existing Donations for date to
            Enter New or Edit Selected Donation
            Changes visibility on the different controls
            </summary>
        </member>
        <member name="F:ClientcardFB3.FoodDonationsForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:ClientcardFB3.FoodDonationsForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ClientcardFB3.FoodDonationsForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:ClientcardFB3.FoodReceiptsForm.fillFoodClasses">
            <summary>
            Fills the Grids with the food classes from the parm_foodclass table
            </summary>
        </member>
        <member name="M:ClientcardFB3.FoodReceiptsForm.GetWeekNumber(System.DateTime)">
            <summary>
            Gets the week number of the year for the date
            </summary>
            <param name="dtPassed">A DateTime</param>
            <returns>(Int)The week number for the date in the year</returns>
        </member>
        <member name="M:ClientcardFB3.FoodReceiptsForm.getAndLoadByWeekData">
            <summary>
            Retrives the Donation Data by week totals and loads them into the MonthTotals grid
            </summary>
        </member>
        <member name="M:ClientcardFB3.FoodReceiptsForm.initList">
            <summary>
            Initializes the Dates found in period to empty
            </summary>
        </member>
        <member name="M:ClientcardFB3.FoodReceiptsForm.zeroOutTotalsByDay">
            <summary>
            Zeros out the Weely Totals
            </summary>
        </member>
        <member name="M:ClientcardFB3.FoodReceiptsForm.zeroOutTotalsByMonth">
            <summary>
            Zeros out the Monthly Totals
            </summary>
        </member>
        <member name="M:ClientcardFB3.FoodReceiptsForm.loadByDayData">
            <summary>
            Loads the View By Day Donations Grid
            </summary>
        </member>
        <member name="M:ClientcardFB3.FoodReceiptsForm.GetNumWeeksInPeriod">
            <summary>
            Returns the number of weeks for the selected period
            </summary>
            <returns>Int(number of weeks)</returns>
        </member>
        <member name="M:ClientcardFB3.FoodReceiptsForm.LoadcboDonor">
            <summary>
            Retrives and loads the donors into the Store Combo Box
            </summary>
        </member>
        <member name="M:ClientcardFB3.FoodReceiptsForm.LoadcboYear">
            <summary>
            Loads the Years into the Year Combo Box
            </summary>
        </member>
        <member name="M:ClientcardFB3.FoodReceiptsForm.btnLoadPeriodData_Click(System.Object,System.EventArgs)">
            <summary>
            Loads the period data
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ClientcardFB3.FoodReceiptsForm.getDonorData">
            <summary>
            Gets the Donations for the selected Donor in the given period
            </summary>
        </member>
        <member name="M:ClientcardFB3.FoodReceiptsForm.LoadListWithCollumHeaders">
            <summary>
            Inserts the proper text into the Column Headers on the View By Day grid
            </summary>
        </member>
        <member name="M:ClientcardFB3.FoodReceiptsForm.loadTotalsForWeek">
            <summary>
            Adds up each of the daily totals for each item and inserts that into the total column
            </summary>
        </member>
        <member name="M:ClientcardFB3.FoodReceiptsForm.loadTotalsForMonth">
            <summary>
            Adds up each of the Weekly totals for each item and inserts that into the total column
            </summary>
        </member>
        <member name="M:ClientcardFB3.FoodReceiptsForm.getRowIndexDependingOnTag(System.Int32,System.Int32)">
            <summary>
            Decides which overloaded findRowIndex to call 
            depending on the tag for the DataGridViewCell
            </summary>
            <param name="dgvRow"></param>
            <param name="dgvCol"></param>
            <returns></returns>
        </member>
        <member name="M:ClientcardFB3.FoodReceiptsForm.initWeekTotals">
            <summary>
            Initializes the totals for both Grids to Zero
            </summary>
        </member>
        <member name="M:ClientcardFB3.FoodReceiptsForm.findRowIndex(System.Int32)">
            <summary>
            Finds the RowIndex in the dataset by ID
            </summary>
            <param name="id">The TrxID</param>
            <returns>(int)RowIndex, If -1 the Donation was not found</returns>
        </member>
        <member name="M:ClientcardFB3.FoodReceiptsForm.findRowIndex(System.Int32,System.DateTime)">
            <summary>
            Finds the RowIndex in the dataset by FoodClass and Date
            </summary>
            <param name="foodClass">the integer representing the FoodClass</param>
            <param name="date">The transaction date</param>
            <returns>(int)RowIndex, If -1 the Donation was not found</returns>
        </member>
        <member name="M:ClientcardFB3.FoodReceiptsForm.update">
            <summary>
            Commits all changes in the dataset to the Donations table
            </summary>
        </member>
        <member name="M:ClientcardFB3.FoodReceiptsForm.dgvMonthReceipts_CellValidating(System.Object,System.Windows.Forms.DataGridViewCellValidatingEventArgs)">
            <summary>
            Validates that the data entered by the user is in proper format
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:ClientcardFB3.FoodReceiptsForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:ClientcardFB3.FoodReceiptsForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ClientcardFB3.FoodReceiptsForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:ClientcardFB3.BackupDBForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:ClientcardFB3.BackupDBForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ClientcardFB3.BackupDBForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:ClientcardFB3.HDItems.SetDataValue(System.String,System.String)">
             <summary>
            An Overloaded set of get/set funtions that will take in any kind of data value used in 
            the front end and accsess the data set for that data type, used mostly for a collection
            of textboxes so collection can be itterated through in one loop and have one function called
            no matter what type it actually refrenced
             </summary>
             <param name="FieldName">Fieldname=Collum Name in the Database</param>
             <param name="FieldValue">FieldValue= .Net Data type</param>
        </member>
        <member name="M:ClientcardFB3.HDItems.find(System.Int32)">
            <summary>
            Finds the TrxID in dataset and sets that row to the drow
            </summary>
            <param name="ID"></param>
            
        </member>
        <member name="M:ClientcardFB3.HDItems.setDataRow(System.Int32)">
            <summary>
            Sets the DataRow for the given RowIndex
            </summary>
            <param name="rowIndex"></param>
        </member>
        <member name="M:ClientcardFB3.HDPlannerForm.openConnection">
            <summary>
            Opens a connection to the Database
            </summary>
        </member>
        <member name="M:ClientcardFB3.HDPlannerForm.closeConnection">
            <summary>
            Closes a connection to the Database
            </summary>
        </member>
        <member name="M:ClientcardFB3.HDPlannerForm.rtplnLoadList(System.Data.DataRow[])">
            <summary>
            Loads the DataGrid using values obtained in the DataSet
            </summary>
        </member>
        <member name="F:ClientcardFB3.HDPlannerForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:ClientcardFB3.HDPlannerForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ClientcardFB3.HDPlannerForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:ClientcardFB3.HDBuildings.SetDataValue(System.String,System.String)">
             <summary>
            An Overloaded set of get/set funtions that will take in any kind of data value used in 
            the front end and accsess the data set for that data type, used mostly for a collection
            of textboxes so collection can be itterated through in one loop and have one function called
            no matter what type it actually refrenced
             </summary>
             <param name="FieldName">Fieldname=Collum Name in the Database</param>
             <param name="FieldValue">FieldValue= .Net Data type</param>
        </member>
        <member name="M:ClientcardFB3.HDBuildings.find(System.Int32)">
            <summary>
            Finds the TrxID in dataset and sets that row to the drow
            </summary>
            <param name="ID"></param>
            
        </member>
        <member name="M:ClientcardFB3.HDBuildings.setDataRow(System.Int32)">
            <summary>
            Sets the DataRow for the given RowIndex
            </summary>
            <param name="rowIndex"></param>
        </member>
        <member name="M:ClientcardFB3.HDRoutes.SetDataValue(System.String,System.String)">
             <summary>
            An Overloaded set of get/set funtions that will take in any kind of data value used in 
            the front end and accsess the data set for that data type, used mostly for a collection
            of textboxes so collection can be itterated through in one loop and have one function called
            no matter what type it actually refrenced
             </summary>
             <param name="FieldName">Fieldname=Collum Name in the Database</param>
             <param name="FieldValue">FieldValue= .Net Data type</param>
        </member>
        <member name="M:ClientcardFB3.HDRoutes.find(System.Int32,System.Boolean)">
            <summary>
            Finds the TrxID in dataset and sets that row to the drow
            </summary>
            <param name="ID"></param>
            
        </member>
        <member name="M:ClientcardFB3.HDRoutes.setDataRow(System.Int32)">
            <summary>
            Sets the DataRow for the given RowIndex
            </summary>
            <param name="rowIndex"></param>
        </member>
        <member name="M:ClientcardFB3.HDRouteSheet.SetDataValue(System.String,System.String)">
             <summary>
            An Overloaded set of get/set funtions that will take in any kind of data value used in 
            the front end and accsess the data set for that data type, used mostly for a collection
            of textboxes so collection can be itterated through in one loop and have one function called
            no matter what type it actually refrenced
             </summary>
             <param name="FieldName">Fieldname=Collum Name in the Database</param>
             <param name="FieldValue">FieldValue= .Net Data type</param>
        </member>
        <member name="M:ClientcardFB3.HDRouteSheet.find(System.Int32,System.Boolean)">
            <summary>
            Finds the TrxID in dataset and sets that row to the drow
            </summary>
            <param name="ID"></param>
            
        </member>
        <member name="M:ClientcardFB3.HDRouteSheet.setDataRow(System.Int32)">
            <summary>
            Sets the DataRow for the given RowIndex
            </summary>
            <param name="rowIndex"></param>
        </member>
        <member name="M:ClientcardFB3.HDRSClients.SetDataValue(System.String,System.String)">
             <summary>
            An Overloaded set of get/set funtions that will take in any kind of data value used in 
            the front end and accsess the data set for that data type, used mostly for a collection
            of textboxes so collection can be itterated through in one loop and have one function called
            no matter what type it actually refrenced
             </summary>
             <param name="FieldName">Fieldname=Collum Name in the Database</param>
             <param name="FieldValue">FieldValue= .Net Data type</param>
        </member>
        <member name="M:ClientcardFB3.HDRSClients.find(System.Int32)">
            <summary>
            Finds the TrxID in dataset and sets that row to the drow
            </summary>
            <param name="ID"></param>
            
        </member>
        <member name="M:ClientcardFB3.HDRSClients.setDataRow(System.Int32)">
            <summary>
            Sets the DataRow for the given RowIndex
            </summary>
            <param name="rowIndex"></param>
        </member>
        <member name="M:ClientcardFB3.HDRSHist.setHistDataRow(System.Int32)">
            <summary>
            Sets the History DataRow for the given RowIndex
            </summary>
            <param name="rowIndex"></param>
        </member>
        <member name="M:ClientcardFB3.HHMemGridForm2.#ctor(ClientcardFB3.Client,System.Int32)">
            <summary>
            Used in initialization of the HHMemForm(ie Constructor)
            </summary>
            <param name="clsIn">The Client Class</param>
            <param name="frmMainIn">The Main Form-Calling Form</param>
            <param name="HHMemID">The Household Member ID</param>
        </member>
        <member name="M:ClientcardFB3.HHMemGridForm2.traverseAndAddControlsToCollections(System.Windows.Forms.Control.ControlCollection)">
            <summary>
            Traverses all controls on the form using recursion and adds each appropriate
            control to the appropriate Collection
            </summary>
            <param name="controlList">The Collection of COntrols</param>
        </member>
        <member name="F:ClientcardFB3.HHMemGridForm2.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:ClientcardFB3.HHMemGridForm2.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ClientcardFB3.HHMemGridForm2.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:ClientcardFB3.HDRoutesForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:ClientcardFB3.HDRoutesForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ClientcardFB3.HDRoutesForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:ClientcardFB3.IncomeGroups.find(System.Int32)">
            <summary>
            Finds the ID in dataset and sets that row to the drow
            </summary>
            <param name="ID"></param>
            
        </member>
        <member name="M:ClientcardFB3.IncomeGroups.setDataRow(System.Int32)">
            <summary>
            Sets the DataRow for the given RowIndex
            </summary>
            <param name="rowIndex"></param>
        </member>
        <member name="M:ClientcardFB3.IncomeGroups.openConnection">
            <summary>
            Opens a connection to the Database
            </summary>
        </member>
        <member name="M:ClientcardFB3.IncomeGroups.closeConnection">
            <summary>
            Closes a connection to the Database
            </summary>
        </member>
        <member name="M:ClientcardFB3.IncomeMatrix.find(System.Int32)">
            <summary>
            Finds the ID in dataset and sets that row to the drow
            </summary>
            <param name="ID"></param>
            
        </member>
        <member name="M:ClientcardFB3.IncomeMatrix.setDataRow(System.Int32)">
            <summary>
            Sets the DataRow for the given RowIndex
            </summary>
            <param name="rowIndex"></param>
        </member>
        <member name="M:ClientcardFB3.IncomeMatrix.openConnection">
            <summary>
            Opens a connection to the Database
            </summary>
        </member>
        <member name="M:ClientcardFB3.IncomeMatrix.closeConnection">
            <summary>
            Closes a connection to the Database
            </summary>
        </member>
        <member name="M:ClientcardFB3.IncomeMatrixForm.#ctor">
            <summary>
            Income Matrix Form Constructor.  Initializes all componants of the form and loads all data
            </summary>
        </member>
        <member name="M:ClientcardFB3.IncomeMatrixForm.fillCombos">
            <summary>
            Fills the Income Groups Combo with the income groups in database
            </summary>
        </member>
        <member name="M:ClientcardFB3.IncomeMatrixForm.loadIncomeGrid">
            <summary>
            Loads the income grid with the values in the database
            </summary>
        </member>
        <member name="M:ClientcardFB3.IncomeMatrixForm.dgvIncomeMatrix_CellEndEdit(System.Object,System.Windows.Forms.DataGridViewCellEventArgs)">
            <summary>
            Event that fires when the cell is done editing
            Inserts data to database and sets visibility on buttons
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ClientcardFB3.IncomeMatrixForm.btnSave_Click(System.Object,System.EventArgs)">
            <summary>
            Event fires when the save button is clicked. 
            Updates the database with any changes made to the dataset
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ClientcardFB3.IncomeMatrixForm.dgvIncomeMatrix_CellValidating(System.Object,System.Windows.Forms.DataGridViewCellValidatingEventArgs)">
            <summary>
            Event fires when a cell is trying to be left, and checks that the value is valid.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ClientcardFB3.IncomeMatrixForm.btnClose_Click(System.Object,System.EventArgs)">
            <summary>
            Event fires when the close button is fired
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ClientcardFB3.IncomeMatrixForm.btnCancel_Click(System.Object,System.EventArgs)">
            <summary>
            Event fires when the cancel button is clicked
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ClientcardFB3.IncomeMatrixForm.cboMatrixGroups_SelectionChangeCommitted(System.Object,System.EventArgs)">
            <summary>
            Event fires when the combo box selection is changed
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ClientcardFB3.IncomeMatrixForm.openForIncomeGroupAndFillGrid">
            <summary>
            Retrives the income martix for the selected 
            group and fills the income matrix grid
            </summary>
        </member>
        <member name="F:ClientcardFB3.IncomeMatrixForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:ClientcardFB3.IncomeMatrixForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ClientcardFB3.IncomeMatrixForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:ClientcardFB3.KCReportForm.openConnection">
            <summary>
            Opens a connection to the Database
            </summary>
        </member>
        <member name="M:ClientcardFB3.KCReportForm.closeConnection">
            <summary>
            Closes a connection to the Database
            </summary>
        </member>
        <member name="F:ClientcardFB3.KCReportForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:ClientcardFB3.KCReportForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ClientcardFB3.KCReportForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:ClientcardFB3.MonthEndReportsForm.findIfReportsExist">
            <summary>
            Checks the Report Path and finds if the reports exist for the current period
            </summary>
        </member>
        <member name="M:ClientcardFB3.MonthEndReportsForm.traverseAndAddControlsToCollections(System.Windows.Forms.Control.ControlCollection)">
            <summary>
            Traverses all controls on the page using recursion and adds the proper ones
            to their proper collections and adds LostFocus event to Textboxes and Checkboxes
            </summary>
            <param name="controlList"></param>
        </member>
        <member name="F:ClientcardFB3.MonthEndReportsForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:ClientcardFB3.MonthEndReportsForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ClientcardFB3.MonthEndReportsForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:ClientcardFB3.MonthlyReportPreferencesForm.fillReports">
            <summary>
            Fills the Reports Grid
            </summary>
        </member>
        <member name="M:ClientcardFB3.MonthlyReportPreferencesForm.fillRecipients(System.Boolean)">
            <summary>
            Fills the dataGridViewRecipients 
            </summary>
            <param name="rowIndex">Row to set checks to</param>
            <param name="setChecks">Tells if should set checks or not</param>
        </member>
        <member name="M:ClientcardFB3.MonthlyReportPreferencesForm.setRecipientChecksForReport(System.Int32)">
            <summary>
            Sets the checks for each recipient for the current report
            </summary>
            <param name="rowIndex">The index of the current row of report</param>
        </member>
        <member name="M:ClientcardFB3.MonthlyReportPreferencesForm.deleteEmailRecptientsFromReports(System.String)">
            <summary>
            Traverses all report emaill recipients and deletes the 
            selected recipient from each 
            </summary>
            <param name="emailAddress">Email Recipient To Delete</param>
        </member>
        <member name="M:ClientcardFB3.MonthlyReportPreferencesForm.btnDeleteRecipients_Click(System.Object,System.EventArgs)">
            <summary>
            Deletes a user from the databse
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ClientcardFB3.MonthlyReportPreferencesForm.btnAddRecipients_Click(System.Object,System.EventArgs)">
            <summary>
            Add an email recipient
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ClientcardFB3.MonthlyReportPreferencesForm.tbTemplatePath_Leave(System.Object,System.EventArgs)">
            <summary>
            Triggers when user leaves the email address textbox
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ClientcardFB3.MonthlyReportPreferencesForm.dataGridViewReicpitents_CellEndEdit(System.Object,System.Windows.Forms.DataGridViewCellEventArgs)">
            <summary>
            Updates the database when a cell in the reipients dataGridView is edited
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ClientcardFB3.MonthlyReportPreferencesForm.dataGridViewReports_CellValueChanged(System.Object,System.Windows.Forms.DataGridViewCellEventArgs)">
            <summary>
            Triggers when the Value of a cell is changed AND the end edit is called or triggered
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ClientcardFB3.MonthlyReportPreferencesForm.dataGridViewReports_CellMouseUp(System.Object,System.Windows.Forms.DataGridViewCellMouseEventArgs)">
            <summary>
            Triggered when the mouse click is released inside a cell
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:ClientcardFB3.MonthlyReportPreferencesForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:ClientcardFB3.MonthlyReportPreferencesForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ClientcardFB3.MonthlyReportPreferencesForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:ClientcardFB3.MonthlyReports.SetDataValue(System.String,System.String)">
             <summary>
            An Overloaded set of get/set funtions that will take in any kind of data value used in 
            the front end and accsess the data set for that data type, used mostly for a collection
            of textboxes so collection can be itterated through in one loop and have one funtion called
            no matter what type it actually refrenced
             </summary>
             <param name="FieldName">Fieldname=Collum Name in the Database</param>
             <param name="FieldValue">FieldValue= .Net Data type</param>
        </member>
        <member name="M:ClientcardFB3.MonthlyReports.openConnection">
            <summary>
            Opens a connection to the Database
            </summary>
        </member>
        <member name="M:ClientcardFB3.MonthlyReports.closeConnection">
            <summary>
            Closes a connection to the Database
            </summary>
        </member>
        <member name="F:ClientcardFB3.NewCSFPSelectionForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:ClientcardFB3.NewCSFPSelectionForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ClientcardFB3.NewCSFPSelectionForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:ClientcardFB3.NewMatrixGroupForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:ClientcardFB3.NewMatrixGroupForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ClientcardFB3.NewMatrixGroupForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:ClientcardFB3.parm_ClientType.openConnection">
            <summary>
            Opens a connection to the Database
            </summary>
        </member>
        <member name="M:ClientcardFB3.parm_ClientType.closeConnection">
            <summary>
            Closes a connection to the Database
            </summary>
        </member>
        <member name="F:ClientcardFB3.SignFamilyCard.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:ClientcardFB3.SignFamilyCard.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ClientcardFB3.SignFamilyCard.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:ClientcardFB3.EmailRecipients.SetDataValue(System.String,System.String)">
             <summary>
            An Overloaded set of get/set funtions that will take in any kind of data value used in 
            the front end and accsess the data set for that data type, used mostly for a collection
            of textboxes so collection can be itterated through in one loop and have one funtion called
            no matter what type it actually refrenced
             </summary>
             <param name="FieldName">Fieldname=Collum Name in the Database</param>
             <param name="FieldValue">FieldValue= .Net Data type</param>
        </member>
        <member name="M:ClientcardFB3.EmailRecipients.openConnection">
            <summary>
            Opens a connection to the Database
            </summary>
        </member>
        <member name="M:ClientcardFB3.EmailRecipients.closeConnection">
            <summary>
            Closes a connection to the Database
            </summary>
        </member>
        <member name="M:ClientcardFB3.TrxLog.#ctor(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes all local data members of class
            </summary>
            <param name="connectString">connectString = Connection String</param>
        </member>
        <member name="M:ClientcardFB3.TrxLog.SetDataValue(System.String,System.String)">
             <summary>
            An Overloaded set of get/set funtions that will take in any kind of data value used in 
            the front end and accsess the data set for that data type, used mostly for a collection
            of textboxes so collection can be itterated through in one loop and have one funtion called
            no matter what type it actually refrenced
             </summary>
             <param name="FieldName">Fieldname=Collum Name in the Database</param>
             <param name="FieldValue">FieldValue= .Net Data type</param>
        </member>
        <member name="M:ClientcardFB3.TrxLog.find(System.Int32)">
            <summary>
            Finds the TrxID in dataset and sets that row to the drow
            </summary>
            <param name="ID"></param>
            
        </member>
        <member name="M:ClientcardFB3.TrxLog.setDataRow(System.Int32)">
            <summary>
            Sets the DataRow for the given RowIndex
            </summary>
            <param name="rowIndex"></param>
        </member>
        <member name="M:ClientcardFB3.TrxLog.DistinctSvcDays">
            <summary>
            Populates the dataset for the service transactions using HoueholdID
            </summary>
            <param name="TrxID">ID=Transaction ID</param>
            <returns>Return if dataset got populated correctly</returns>
        </member>
        <member name="M:ClientcardFB3.TrxLog.openUsingDateRange(System.Int32,System.DateTime,System.DateTime)">
            <summary>
            Populates the dataset using a date range for the Household
            </summary>
            <param name="HHID">HHID=HouseholdID</param>
            <param name="dateFrom">dateFrom=Starting Date</param>
            <param name="dateTo">dateTo=Ending Date</param>
            <returns>Returns if the dataset is populated with valid data</returns>
        </member>
        <member name="M:ClientcardFB3.TrxLog.delete(System.String)">
            <summary>
            Deletes a single service transaction from daily log using the TrxID
            </summary>
            <param name="key">key=TrxID</param>
        </member>
        <member name="M:ClientcardFB3.TrxLog.deleteAllHHSvcTrans(System.Int32)">
            <summary>
            Deletes all service transactions from daily log for a household
            </summary>
            <param name="key">key=HouseholdID</param>
        </member>
        <member name="M:ClientcardFB3.TrxLog.update(System.Int32,System.String)">
            <summary>
            Checks for differences between the Service Transaction dataset and the TrxLog Table
            and then makes the changes in the database
            </summary>
        </member>
        <member name="M:ClientcardFB3.TrxLog.insert">
            <summary>
            Inserts a new Transaction into the daily log
            </summary>
        </member>
        <member name="M:ClientcardFB3.TrxLog.openConnection">
             <summary>
            These methods are modular methods that just check the connection state before trying to 
            open or close a connection
             </summary>
        </member>
        <member name="P:ClientcardFB3.TrxLog.RowCount">
            <summary>
            Each of these acsessors either gets or sets a value in the dataset.  
            These changes are not made in the database untill the update 
            funtion is called.
            </summary>
        </member>
        <member name="M:ClientcardFB3.TrxLogItem.#ctor(System.Data.DataRow)">
            <summary>
            Initializes all local data members of class
            </summary>
            <param name="connectString">connectString = Connection String</param>
        </member>
        <member name="M:ClientcardFB3.TrxLogItem.SetDataValue(System.String,System.String)">
             <summary>
            An Overloaded set of get/set funtions that will take in any kind of data value used in 
            the front end and accsess the data set for that data type, used mostly for a collection
            of textboxes so collection can be itterated through in one loop and have one funtion called
            no matter what type it actually refrenced
             </summary>
             <param name="FieldName">Fieldname=Collum Name in the Database</param>
             <param name="FieldValue">FieldValue= .Net Data type</param>
        </member>
        <member name="P:ClientcardFB3.TrxLogItem.DRow">
            <summary>
            Each of these acsessors either gets or sets a value in the dataset.  
            These changes are not made in the database untill the update 
            funtion is called.
            </summary>
        </member>
        <member name="F:ClientcardFB3.ListViewColumnSorter.ColumnToSort">
            <summary>
            Specifies the column to be sorted
            </summary>
        </member>
        <member name="F:ClientcardFB3.ListViewColumnSorter.OrderOfSort">
            <summary>
            Specifies the order in which to sort (i.e. 'Ascending').
            </summary>
        </member>
        <member name="F:ClientcardFB3.ListViewColumnSorter.ObjectCompare">
            <summary>
            Case insensitive comparer object
            </summary>
        </member>
        <member name="M:ClientcardFB3.ListViewColumnSorter.#ctor">
            <summary>
            Class constructor.  Initializes various elements
            </summary>
        </member>
        <member name="M:ClientcardFB3.ListViewColumnSorter.Compare(System.Object,System.Object)">
            <summary>
            This method is inherited from the IComparer interface.  It compares the two objects passed using a case insensitive comparison.
            </summary>
            <param name="x">First object to be compared</param>
            <param name="y">Second object to be compared</param>
            <returns>The result of the comparison. "0" if equal, negative if 'x' is less than 'y' and positive if 'x' is greater than 'y'</returns>
        </member>
        <member name="P:ClientcardFB3.ListViewColumnSorter.SortColumn">
            <summary>
            Gets or sets the number of the column to which to apply the sorting operation (Defaults to '0').
            </summary>
        </member>
        <member name="P:ClientcardFB3.ListViewColumnSorter.Order">
            <summary>
            Gets or sets the order of sorting to apply (for example, 'Ascending' or 'Descending').
            </summary>
        </member>
        <member name="M:ClientcardFB3.FindClientForm.chkIncludeInactive_CheckStateChanged(System.Object,System.EventArgs)">
            <summary>
            Reloads the clients but also includes the inactive clients
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ClientcardFB3.FindClientForm.fillTextBoxes">
            <summary>
            Fills the textbox's for the currently selected client
            </summary>
        </member>
        <member name="M:ClientcardFB3.FindClientForm.getDistints(System.String)">
            <summary>
            Retrives all distinct values for a given column Name in the Household Table
            </summary>
            <param name="colName">The Name of the Column to get distincts for</param>
        </member>
        <member name="M:ClientcardFB3.FindClientForm.loadList">
            <summary>
            Clears Datagrid and Loads the Clients
            </summary>
        </member>
        <member name="F:ClientcardFB3.FindClientForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:ClientcardFB3.FindClientForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ClientcardFB3.FindClientForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:ClientcardFB3.Household.SetDataValue(System.String,System.String)">
             <summary>
            An Overloaded set of get/set funtions that will take in any kind of data value used in 
            the front end and accsess the data set for that data type, used mostly for a collection
            of textboxes so collection can be itterated through in one loop and have one funtion called
            no matter what type it actually refrenced
             </summary>
             <param name="FieldName">Fieldname=Collum Name in the Database</param>
             <param name="FieldValue">FieldValue= .Net Data type</param>
        </member>
        <member name="M:ClientcardFB3.Household.getIdFromBarCode(System.Int32)">
            <summary>
            Opens a single household
            </summary>
            <param name="ID">key=ID</param>
            <returns>Returns if DataSet has an entry or not</returns>
        </member>
        <member name="M:ClientcardFB3.Household.open(System.Int32)">
            <summary>
            Opens a single household
            </summary>
            <param name="ID">key=ID</param>
            <returns>Returns if DataSet has an entry or not</returns>
        </member>
        <member name="M:ClientcardFB3.Household.getDistincts(System.String,System.String)">
            <summary>
            Gets the ditinct values for any collumn
            </summary>
            <param name="columnName">Collumn name</param>
        </member>
        <member name="M:ClientcardFB3.Household.delete(System.Int32)">
            <summary>
            Deletes Household from the database
            </summary>
            <param name="key">ID</param>
        </member>
        <member name="M:ClientcardFB3.Household.update(System.Boolean)">
            <summary>
            Updates the hosuehold in the database with any changes made to the DataSet
            </summary>
        </member>
        <member name="M:ClientcardFB3.Household.openConnection">
            <summary>
            Opens a connection to the Database
            </summary>
        </member>
        <member name="M:ClientcardFB3.Household.closeConnection">
            <summary>
            Closes a connection to the Database
            </summary>
        </member>
        <member name="M:ClientcardFB3.HHMembers.SetDataValue(System.String,System.String)">
             <summary>
            An Overloaded set of get/set funtions that will take in any kind of data value used in 
            the front end and accsess the data set for that data type, used mostly for a collection
            of textboxes so collection can be itterated through in one loop and have one funtion called
            no matter what type it actually refrenced
            Sets data value when value is a string
             </summary>
             <param name="FieldName">Fieldname=Collum Name in the Database</param>
             <param name="FieldValue">FieldValue= .Net Data type</param>
        </member>
        <member name="M:ClientcardFB3.HHMembers.SetDataValue(System.String,System.Boolean)">
            <summary>
            Sets data value when value is a boolean value
            </summary>
            <param name="FieldName">Name of the field in the database</param>
            <param name="FieldValue">value to set</param>
        </member>
        <member name="M:ClientcardFB3.HHMembers.SetRecord(System.Int32)">
            <summary>
            Sets the DataRow of HH Members to be the row index passed in
            </summary>
            <param name="rowIndex">The row index in the dataset</param>
        </member>
        <member name="T:ClientcardFB3.HHMemberItem">
            <summary>
            
            </summary>
        </member>
        <member name="M:ClientcardFB3.HHMemberItem.SetDataValue(System.String,System.String)">
             <summary>
            An Overloaded set of get/set funtions that will take in any kind of data value used in 
            the front end and accsess the data set for that data type, used mostly for a collection
            of textboxes so collection can be itterated through in one loop and have one funtion called
            no matter what type it actually refrenced
            Sets data value when value is a string
             </summary>
             <param name="FieldName">Fieldname=Collum Name in the Database</param>
             <param name="FieldValue">FieldValue= .Net Data type</param>
        </member>
        <member name="M:ClientcardFB3.HHMemberItem.SetDataValue(System.String,System.Boolean)">
            <summary>
            Sets data value when value is a boolean value
            </summary>
            <param name="FieldName">Name of the field in the database</param>
            <param name="FieldValue">value to set</param>
        </member>
        <member name="F:ClientcardFB3.LoginForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:ClientcardFB3.LoginForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ClientcardFB3.LoginForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:ClientcardFB3.MainForm.AgeGroupName(System.Int32)">
            <summary>
            Retrives the Age Group Name From the AgeGroups Array
            </summary>
            <param name="age">The Integer value from database and 
            corresponding index in array for the age group to retrive</param>
            <returns></returns>
        </member>
        <member name="M:ClientcardFB3.MainForm.btnBeginEdit_Click(System.Object,System.EventArgs)">
            <summary>
            Event triggered when the Edit button is clicked
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ClientcardFB3.MainForm.btnNext_Click(System.Object,System.EventArgs)">
            <summary>
            Event Triggers when next client button is clicked
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ClientcardFB3.MainForm.btnPrevious_Click(System.Object,System.EventArgs)">
            <summary>
            Event triggered when the Previous Client Buttton is clicked
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ClientcardFB3.MainForm.CaptureAndPrintForm">
            <summary>
            Captrues the Active Form, saves it as a ScreenShot, and Prints that ScreenShot.
            </summary>
        </member>
        <member name="M:ClientcardFB3.MainForm.changeEditMode(System.Boolean)">
            <summary>
            Changes the inEditMode mode state and either enables or dissables the 
            proper controls
            </summary>
        </member>
        <member name="M:ClientcardFB3.MainForm.checkParseTextboxToInt(System.Windows.Forms.TextBox@)">
            <summary>
            Checks if Textbox value can be parsed to an int
            </summary>
            <param name="tb">the textbox to be parsed</param>
            <returns>Returns the int value</returns>
        </member>
        <member name="M:ClientcardFB3.MainForm.chkList_CheckedChanged(System.Object,System.EventArgs)">
            <summary>
            Deals with a CheckBox checked state being changed
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ClientcardFB3.MainForm.chkUseFamList_CheckedChanged(System.Object,System.EventArgs)">
            <summary>
            Event triggered when the UseFamilyList checkbox is checked
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ClientcardFB3.MainForm.clearForm">
            <summary>
            Clears the MainForm of all existing client data and sets
            appropriate items to be dissabled
            </summary>
        </member>
        <member name="M:ClientcardFB3.MainForm.closeConnection">
            <summary>
            Closes a connection to the Database
            </summary>
        </member>
        <member name="M:ClientcardFB3.MainForm.fillAutoAlert">
            <summary>
            Fills the AutoAlert Textbox with Proper info
            </summary>
        </member>
        <member name="M:ClientcardFB3.MainForm.fillForm">
            <summary>
            Fills the form with the data from the client in database
            </summary>
        </member>
        <member name="M:ClientcardFB3.MainForm.setChecksInUserFields">
            <summary>
            Sets the check boxes for the user fields
            </summary>
        </member>
        <member name="M:ClientcardFB3.MainForm.FillGridMembersCell(System.Windows.Forms.DataGridViewRow,System.String,System.String,System.Boolean,System.Drawing.Color,System.Int32)">
            <summary>
            Fills the given cell with the proper value and sets the color scheme
            </summary>
            <param name="dgvRow">The DataGridView row that the cell exists in</param>
            <param name="ColName">The Column Name of the cell to fill</param>
            <param name="FieldName">The Field Name of the value to retrive from  the given row of the database</param>
            <param name="IsBoolean">If the value seeked is a bool value or not</param>
            <param name="CellForeColor">The Text Color Wanted</param>
            <param name="dsetRowIndex">The Row that you need from the database</param>
        </member>
        <member name="M:ClientcardFB3.MainForm.formatDate(System.Windows.Forms.TextBox@)">
            <summary>
            Formats a DateTime Textbox to proper format
            </summary>
            <param name="tb">Refrence to the Textbox thats Text needs to be formated</param>
        </member>
        <member name="M:ClientcardFB3.MainForm.loadHHMems(System.Boolean)">
            <summary>
            Loads the Household Members Listview with the Household Members
            </summary>
        </member>
        <member name="M:ClientcardFB3.MainForm.loadParmData">
            <summary>Loads the ComboBox's with parm_Table Data 
            </summary>
        </member>
        <member name="M:ClientcardFB3.MainForm.loadTransLog(System.String)">
            <summary>
            Opens the TrxLog for the Client, uses the SQLDataReader 
            to read the rows and Loads them into ListView
            </summary>
        </member>
        <member name="M:ClientcardFB3.MainForm.loadVoucherLog(System.String)">
            <summary>
            Opens the VoucherLog for the Client, uses the SQLDataReader 
            to read the rows and Loads them into ListView
            </summary>
        </member>
        <member name="M:ClientcardFB3.MainForm.loadUserFieldLabels">
            <summary>  Loads User Check Box Labels from UserFields Table
            </summary>
        </member>
        <member name="M:ClientcardFB3.MainForm.openConnection">
            <summary>
            Opens a connection to the Database
            </summary>
        </member>
        <member name="M:ClientcardFB3.MainForm.setEditStateForControls(System.Drawing.Color)">
            <summary>
            Converts the Textbox's mode based on inEditMode
            </summary>
        </member>
        <member name="M:ClientcardFB3.MainForm.SetEnvironmentFromPrefs">
            <summary>
            Turns off or on the different controls for how they were
            set in the prefrences
            </summary>
        </member>
        <member name="M:ClientcardFB3.MainForm.setHousehold(System.Int32,System.Int32)">
            <summary>
            Opens the selected household and re-fills the form
            </summary>
            <param name="newHhID">HouseholdID</param>
        </member>
        <member name="M:ClientcardFB3.MainForm.setPermissionsForMenu">
            <summary>
            Set main menu items to invisible if Tag > permission;
            Set sub-menu items to disabled if Tag > permission;
            0 = Intake, 1=Intake Admin, 2 = Admin
            </summary>
        </member>
        <member name="M:ClientcardFB3.MainForm.ShowFamData">
            <summary>
            Populates the family demographic textboxes
            </summary>
        </member>
        <member name="M:ClientcardFB3.MainForm.tbList_LostFocus(System.Object,System.EventArgs)">
            <summary>
            Used to deal with a textbox losing focus
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ClientcardFB3.MainForm.traverseAndAddControlsToCollections(System.Windows.Forms.Control.ControlCollection)">
            <summary>
            Traverses all controls on the page using recursion and adds the proper ones
            to their proper collections and adds LostFocus event to Textboxes and Checkboxes
            </summary>
            <param name="controlList"></param>
        </member>
        <member name="M:ClientcardFB3.MainForm.tsbFindClient_Click(System.Object,System.EventArgs)">
            <summary>
            Deals with Find Client Button being clicked
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:ClientcardFB3.MainForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:ClientcardFB3.MainForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ClientcardFB3.MainForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:ClientcardFB3.Program.Main">
            <summary>
            The main entry point for the application.
            </summary>
        </member>
        <member name="M:ClientcardFB3.ServiceItems.SetDataValue(System.String,System.String)">
             <summary>
            An Overloaded set of get/set funtions that will take in any kind of data value used in 
            the front end and accsess the data set for that data type, used mostly for a collection
            of textboxes so collection can be itterated through in one loop and have one funtion called
            no matter what type it actually refrenced
             </summary>
             <param name="FieldName">Fieldname=Collum Name in the Database</param>
             <param name="FieldValue">FieldValue= .Net Data type</param>
        </member>
        <member name="F:ClientcardFB3.ServiceItemsForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:ClientcardFB3.ServiceItemsForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ClientcardFB3.ServiceItemsForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:ClientcardFB3.TrxLogPeriodTotals.setDataRow(System.Int32)">
            <summary>
            Sets the DataRow for the given RowIndex
            </summary>
            <param name='rowIndex'></param>
        </member>
        <member name="F:ClientcardFB3.TrxLogForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:ClientcardFB3.TrxLogForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ClientcardFB3.TrxLogForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:ClientcardFB3.parmTypeCodes.TypeCodesArray">
            <summary>
            Return a parmType array used to populate a ComboBox control.
            </summary>
        </member>
        <member name="F:ClientcardFB3.TypeCodeChangeForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:ClientcardFB3.TypeCodeChangeForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ClientcardFB3.TypeCodeChangeForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:ClientcardFB3.UserFields.SetDataValue(System.String,System.String)">
             <summary>
            An Overloaded set of get/set funtions that will take in any kind of data value used in 
            the front end and accsess the data set for that data type, used mostly for a collection
            of textboxes so collection can be itterated through in one loop and have one funtion called
            no matter what type it actually refrenced
             </summary>
             <param name="FieldName">Fieldname=Collum Name in the Database</param>
             <param name="FieldValue">FieldValue= .Net Data type</param>
        </member>
        <member name="F:ClientcardFB3.UserInputForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:ClientcardFB3.UserInputForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ClientcardFB3.UserInputForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:ClientcardFB3.UsersForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:ClientcardFB3.UsersForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ClientcardFB3.UsersForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:ClientcardFB3.UWKCExportForm.openConnection">
            <summary>
            Opens a connection to the Database
            </summary>
        </member>
        <member name="M:ClientcardFB3.UWKCExportForm.closeConnection">
            <summary>
            Closes a connection to the Database
            </summary>
        </member>
        <member name="F:ClientcardFB3.UWKCExportForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:ClientcardFB3.UWKCExportForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ClientcardFB3.UWKCExportForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:ClientcardFB3.VolunteerHours.SetDataValue(System.String,System.String)">
             <summary>
            An Overloaded set of get/set funtions that will take in any kind of data value used in 
            the front end and accsess the data set for that data type, used mostly for a collection
            of textboxes so collection can be itterated through in one loop and have one funtion called
            no matter what type it actually refrenced
             </summary>
             <param name="FieldName">Fieldname=Collum Name in the Database</param>
             <param name="FieldValue">FieldValue= .Net Data type</param>
        </member>
        <member name="M:ClientcardFB3.VolunteerHoursForm.initVolGroupValues">
            <summary>
            Initializes all the hours for each group to Zero
            </summary>
        </member>
        <member name="F:ClientcardFB3.VolunteerHoursForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:ClientcardFB3.VolunteerHoursForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ClientcardFB3.VolunteerHoursForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:ClientcardFB3.Volunteers.SetDataValue(System.String,System.String)">
             <summary>
            An Overloaded set of get/set funtions that will take in any kind of data value used in 
            the front end and accsess the data set for that data type, used mostly for a collection
            of textboxes so collection can be itterated through in one loop and have one funtion called
            no matter what type it actually refrenced
             </summary>
             <param name="FieldName">Fieldname=Collum Name in the Database</param>
             <param name="FieldValue">FieldValue= .Net Data type</param>
        </member>
        <member name="M:ClientcardFB3.Volunteers.getDistincts(System.String,System.String)">
            <summary>
            Gets the ditinct values for any collumn
            </summary>
            <param name="columnName">Collumn name</param>
        </member>
        <member name="M:ClientcardFB3.Volunteers.setRecord(System.Int32)">
            <summary>
            Sets the DataRow of HH Members to be the row index passed in
            </summary>
            <param name="rowIndex">The row index in the dataset</param>
        </member>
        <member name="M:ClientcardFB3.VolunteerStats.setDataRow(System.Int32)">
            <summary>
            Sets the DataRow for the given RowIndex
            </summary>
            <param name='rowIndex'></param>
        </member>
        <member name="M:ClientcardFB3.VoucherShortForm.loadVoucherLog(System.String)">
            <summary>
            Opens the VoucherLog for the Client, uses the SQLDataReader 
            to read the rows and Loads them into ListView
            </summary>
        </member>
        <member name="M:ClientcardFB3.VoucherShortForm.openConnection">
            <summary>
            Opens a connection to the Database
            </summary>
        </member>
        <member name="M:ClientcardFB3.VoucherShortForm.closeConnection">
            <summary>
            Closes a connection to the Database
            </summary>
        </member>
        <member name="F:ClientcardFB3.VoucherShortForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:ClientcardFB3.VoucherShortForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ClientcardFB3.VoucherShortForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:ClientcardFB3.VoucherItems.SetDataValue(System.String,System.String)">
             <summary>
            An Overloaded set of get/set funtions that will take in any kind of data value used in 
            the front end and accsess the data set for that data type, used mostly for a collection
            of textboxes so collection can be itterated through in one loop and have one funtion called
            no matter what type it actually refrenced
             </summary>
             <param name="FieldName">Fieldname=Collum Name in the Database</param>
             <param name="FieldValue">FieldValue= .Net Data type</param>
        </member>
        <member name="T:ClientcardFB3.VoucherLog">
            <summary>
            
            </summary>
        </member>
        <member name="M:ClientcardFB3.VoucherLog.SetDataValue(System.String,System.String)">
             <summary>
            An Overloaded set of get/set funtions that will take in any kind of data value used in 
            the front end and accsess the data set for that data type, used mostly for a collection
            of textboxes so collection can be itterated through in one loop and have one function called
            no matter what type it actually refrenced
             </summary>
             <param name="FieldName">Fieldname=Column Name in the Database</param>
             <param name="FieldValue">FieldValue= .Net Data type</param>
        </member>
        <member name="M:ClientcardFB3.VoucherLog.find(System.Int32,System.Boolean)">
             <summary>
             Finds the UID in dataset and sets that row to the dRow
             </summary>
             <param name="ID"></param>
            
        </member>
        <member name="M:ClientcardFB3.VoucherLog.setDataRow(System.Int32)">
            <summary>
            Sets the DataRow for the given RowIndex
            </summary>
            <param name="rowIndex"></param>
        </member>
        <member name="F:ClientcardFB3.WebPageForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:ClientcardFB3.WebPageForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ClientcardFB3.WebPageForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:ClientcardFB3.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:ClientcardFB3.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:ClientcardFB3.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
    </members>
</doc>
